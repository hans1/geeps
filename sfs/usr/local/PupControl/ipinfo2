#!/bin/bash

# --------------
# PROGRAM: ipdisp 
# AUTHOR: Vovchik
# PURPOSE: GUI to show IP config info
# DATE: 14 May 2009
# 101015 and 111223: radky added support for
# gtkdialog4, specialmono font, enhanced GUI
# text, help files, and Summary notebook tab
# --------------

[ "`whoami`" != "root" ] && exec sudo -A ${0} ${@}

WORKDIR="/usr/local/PupControl"

#define gtkdialog
if [ "`which gtkdialog4`" ]; then
 GTKDIALOG=gtkdialog4
elif [ "`which gtkdialog3`" ]; then
 GTKDIALOG=gtkdialog3
else
 GTKDIALOG=gtkdialog
fi

# Create specialmono gtk-theme for var13 (statistics tab)
echo 'style "specialmono"
{
  font_name="Mono 11"
}
widget "*mono" style "specialmono"
class "GtkText*" style "specialmono"' > /tmp/gtkrc_mono

export GTK2_RC_FILES=/tmp/gtkrc_mono:/root/.gtkrc-2.0 

# --------------
# functions
# --------------

# --------------
get_data()
# --------------
{
	nl='
'
	# external ip
	var0=`wget -T 15 -O - -q icanhazip.com`
	var0="<b>External IP:</b> ""$var0"
	# tab 1 - interfaces
	var01=`echo "$(hostname)"` #TazOC Aug 2011
	var02=`ifconfig`
	# tab 3 - routing
	var03="`route -n | sed '/Kernel IP routing table/d'`"
	# tab 2 - DNS
	var04="The Domain Name Server System (DNS) is the
internet-server database that translates
easily-read domain names into IP addresses."
	var05=`cat /etc/resolv.conf | sed -e '/\# \/etc\/resolv.conf/d' -e '/^$/d' -e 's/# Generated by/DNS: Generated by/' -e '/Generated/G'`
	# tab 4 - collect wireless data
	wifi=`iwgetid -a | gawk '{print $1}'`
	# echo "mywifi: ""$wifi"
	spaces="     "
	if [ -n "$wifi" ]; then 
		var06=`iwgetid -a 2>&1`
		var07=`iwgetid -c 2>&1`
		var08=`iwgetid -f 2>&1`
		var09=`iwgetid -m 2>&1`
		var10=`iwlist encryption 2>&1 | grep -v "no encryption"`
		var11=`iwlist rate 2>&1 | grep Current`
		# concatenate wireless data for display
		var12="$var06""$nl""$var07""$nl""$var08""$nl""$var09""$nl""$var10""$nl""$var11""$nl"
		var12=`echo "$var12" | sed '/^$/d' ` 
	else
		var12="<b>[No wireless extensions]</b>"
	fi
	# tab 5 - collect connection data (netstat)
	var13=`netstat -tan | sed 's/Active Internet connections/ACTIVE INTERNET CONNECTIONS:/' | sed '/Proto/{x;p;x;G;}'`
	# tab 6 - network summary
	. $WORKDIR/func -sysinfo_network
	var14=`cat /tmp/sysinfo-network | sed -e 's/Session/\nSession/' -e 's/External/\nHostname: '"$var01"'\nExternal/'`
}	
# --------------
show_data()
# --------------
{
	echo "$var01"
	echo
	echo "$var02"
	echo
	echo "$var03"
	echo
	echo "$var04"
	echo "$var05"
	echo
	echo "$var12"
	echo "$var13"
	echo "$var14"
}

#IP Info routing help dlg...
echo '#!/bin/sh
if [ "`which gtkdialog4`" ]; then
 GTKDIALOG=gtkdialog4
elif [ "`which gtkdialog3`" ]; then
 GTKDIALOG=gtkdialog3
else
 GTKDIALOG=gtkdialog
fi' > /tmp/Routing-help
echo 'export ROUTING_DIALOG="<window title=\"Routing Help\" icon-name=\"gtk-help\" resizable=\"false\">
 <vbox>
  <frame Output of the Kernel IP Routing Table>
  <text use-markup=\"true\"><label>\"
<b>Destination:</b> The destination network or destination host.
<b>Gateway:</b> The gateway address or ‘*’ if none set.
<b>Genmask:</b> Netmask for destination net; ‘255.255.255.255' for a host destination and ‘0.0.0.0' for the default route.

<b>Flags:</b>	Possible flags include
	U	(route is up)
	H	(target is a host)
	G	(use gateway)
	R	(reinstate route for dynamic routing)
	D	(dynamically installed by daemon or redirect)
	M	(modified from routing daemon or redirect)
	A	(installed by addrconf)
	C	(cache entry)
	!	(reject route)

<b>Metric:</b> Distance to the target (usually in hops): Not used by recent kernels, but may be used by routing daemons.
<b>Ref:</b> Number of references to this route. Not in Linux kernel.
<b>Use:</b> Count of route lookups. Depending on use of -F or -C this will be either route cache misses (-F) or hits (-C).
<b>Iface:</b> Interface to which packets for this route will be sent.\"</label></text>
  </frame>
   <hbox>
      <button cancel></button>
   </hbox>
 </vbox>
</window>"
$GTKDIALOG --geometry 0x0+0+0 --program=ROUTING_DIALOG' >> /tmp/Routing-help
chmod 777 /tmp/Routing-help

#IP Info statistics help dlg...
echo '#!/bin/sh
if [ "`which gtkdialog4`" ]; then
 GTKDIALOG=gtkdialog4
elif [ "`which gtkdialog3`" ]; then
 GTKDIALOG=gtkdialog3
else
 GTKDIALOG=gtkdialog
fi' > /tmp/Statistics-help
echo 'export STATISTICS_DIALOG="<window title=\"Statistics Help\" icon-name=\"gtk-help\" resizable=\"false\">
 <vbox>
  <frame Output of the Active Internet Connections>
  <text use-markup=\"true\"><label>\"
<b>Proto:</b> The protocol (TCP, UDP, raw) used by the socket.
<b>Recv-Q:</b> The byte count not copied by the user program connected to this socket.
<b>Send-Q:</b> The byte count not acknowledged by remote host.
<b>Local Address:</b> Address:port no. of local end of socket. 
<b>Foreign Address:</b> Address:port no. of remote end of socket.
<b>State:</b> The state of the socket. There are no states in raw mode and usually no states in UDP. Possible values follow:

LISTEN: Socket is listening for incoming connections.
SYN_RECV: Connection request received from the network.
SYN_SENT: Socket is attempting to establish a connection.
ESTABLISHED: Socket has an established connection.
FIN_WAIT1: Socket is closed. Connection is shutting down.
FIN_WAIT2: Connection is closed, and the socket is waiting for shutdown from the remote end.
LAST_ACK: Remote end shutdown, and the socket is closed, waiting for acknowledgement.
CLOSE_WAIT: Remote end shutdown, wait for socket closure.
CLOSING: Both sockets shutdown, waiting to send all data.
CLOSED: Socket is not being used.
TIME_WAIT: Socket closed, waiting for packets still in network.\"</label></text>
  </frame>
   <hbox>
      <button cancel></button>
   </hbox>
 </vbox>
</window>"
$GTKDIALOG --geometry 0x0+175+0 --program=STATISTICS_DIALOG' >> /tmp/Statistics-help
chmod 777 /tmp/Statistics-help

# --------------
make_gui()
# --------------
{
export show_ip_info="
<window title=\"IP Info\" icon-name=\"gtk-about\" resizable=\"true\">
	<vbox>
		<frame Network Configuration>
			<notebook page=\"2\" labels=\"Interfaces|DNS|Routing|Wireless|Statistics|Summary\">
				<vbox>
					<text use-markup=\"true\" wrap=\"false\">
						<label>\"<tt><b>${nl}Hostname: </b>${var01}${nl}${var0}${nl}${nl}<b>TCP/IP Network Interface:</b>${nl}${var02}</tt>\"</label>
					</text>
				</vbox>
				<vbox>
					<text use-markup=\"true\" wrap=\"false\">
						<label>\"<tt><b>${nl}${var04}${nl}</b>${nl}${var05}</tt>\"</label>
					</text>
				</vbox>
				<vbox>
					<text use-markup=\"true\" wrap=\"false\">
						<label>\"<tt>${nl}<b>Kernel IP Routing Table:</b>${nl}${nl}${var03}${nl}${nl}</tt>\"</label>
					</text>
				</vbox>
				<vbox>
					<text use-markup=\"true\" wrap=\"false\">
						<label>\"<tt><b>${nl}Wireless configuration:${nl}</b>${nl}${var12}</tt>\"</label>
					</text>
				</vbox>
				<vbox>
					<edit editable=\"false\" use-markup=\"true\" wrap=\"false\">
						<default>\"${nl}${var13}\"</default>
					</edit>
				</vbox>
				<vbox>
					<text use-markup=\"true\" wrap=\"false\">
						<label>\"<tt><b>${nl}Network Configuration Summary:${nl}</b>${nl}${var14}</tt>\"</label>
					</text>
				</vbox>
			</notebook>
		</frame>
		<hbox>
			<button>
 			  <label>Refresh</label>
				<action>/usr/local/PupControl/func -ipinfo2 &</action>
				<action> exit: gtkdialogue </action>
			</button> 

			<button help>
				<action>/tmp/Routing-help &</action>
				<action>/tmp/Statistics-help &</action>
			</button>

			<button cancel>
				<action> exit: gtkdialogue </action>
			</button>
		</hbox>
	</vbox>
</window>
"
}

# --------------
display_gui()
# --------------
{
	$GTKDIALOG --program=show_ip_info --center
}

# --------------
# end functions
# --------------

# --------------
# main
# --------------

xmessage -title PSI -buttons "" -center -bg goldenrod1 " Please wait, processing..." &
XPID=$!
get_data
show_data
make_gui
kill $XPID
display_gui
exit 0

# --------------
# end main
# --------------
