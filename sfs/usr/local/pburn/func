#! /bin/sh

PAR=$1
PAR2=$2
export BURNLIST_DIR="`cat $WORKDIR/burnlist_dir 2> /dev/null`"
#reset gtk-theme
if [ -f $HOME/.gtkrc-2.0 ]; then
	export GTK2_RC_FILES="`grep -m 1 gtkrc $HOME/.gtkrc-2.0 | cut -d'\"' -f2 2> /dev/null`" #get active theme
else
	export GTK2_RC_FILES=':/etc/gtk-2.0/gtkrc' #/etc/gtk-2.0/gtkrc is for < Puppy4
fi
#---
GRAFT_POINT_DIR="`echo "$BURNLIST_DIR/" | sed "s%$TMPDIR%%g"  2> /dev/null | sed -e 's%//%/%g'`" #be sure it ends with /
[ "$GRAFT_POINT_DIR" = '/' ] && GRAFT_POINT_DIR="" #no root dir when burning

build_burn_list () {
if [ "$BURN_DATA" = "false" ]; then
	mv -f $WORKDIR/burn $WORKDIR/tmp3 #keep old length-info
	echo -n > $WORKDIR/burn
	#VIDEO_TS
	if [ "$BURN_VIDEO" = "true" ]; then
		TMP="`grep -i 'video_ts/$' $WORKDIR/graft_points | cut -d'=' -f1`" 
		if [ "$TMP" ]; then echo "gtk-directory|$TMP|" >> $WORKDIR/burn; VIDEO_TS=true; fi
		TMP="`grep -i 'audio_ts/$' $WORKDIR/graft_points | cut -d'=' -f1`" 
		if [ "$TMP" ]; then echo "gtk-directory|$TMP|" >> $WORKDIR/burn; VIDEO_TS=true; fi
		if [ "$VIDEO_TS" = "true" ]; then
			 echo video_ts > $WORKDIR/BURNLIST_MODE
			 echo 100 > $WORKDIR/splash
			exit
		fi
	fi
	#---
	[ "$BURN_AUDIO" = "true" ] && ls -A1 "$BURNLIST_DIR" | grep -iE "$AUDIO_FORMATS" > $WORKDIR/tmp
	[ "$BURN_VIDEO" = "true" ] && ls -A1 "$BURNLIST_DIR" | grep -iE "$VIDEO_FORMATS|$IMAGE_FORMATS" > $WORKDIR/tmp
	[ ! -s $WORKDIR/tmp ] && sleep 0.5 #if nothing to update, ensure to sleep as much as the splash-box does. Else the splash won't dissapear
	#number audio/video list
	COUNT=0
	while read I; do
		COUNT=$((COUNT+1)); NR=$COUNT
		[ ${#COUNT} -eq 1 ] && NR="0$COUNT" #ensure 2 digits
		ITEM="${I%%|*}"
		NEW="${ITEM#([0-9][0-9])_}" #remove old number
		[ "$ITEM" != "($NR)_$NEW" ] && mv "$BURNLIST_DIR/$ITEM" "$BURNLIST_DIR/($NR)_$NEW"
		TIME="`grep "$NEW" $WORKDIR/tmp3 | cut -d '|' -f 3 | grep ':'`"
		if [ "$TIME" ]; then #length already present
			echo "gtk-media-play|($NR)_$NEW|$TIME" >> $WORKDIR/burn
		else
			if echo "$I" | grep -iEq "$IMAGE_FORMATS" ; then #pictures get 00:00
				if [ ${#PIC_VIEWTIME} -eq 1 ]; then # one char long?
					echo "gtk-media-play|($NR)_$NEW|00:00:0$PIC_VIEWTIME" >> $WORKDIR/burn
				else
					echo "gtk-media-play|($NR)_$NEW|00:00:$PIC_VIEWTIME" >> $WORKDIR/burn
				fi
			else
				ffmpeg -i "$TMPDIR/($NR)_$NEW" 2> $WORKDIR/tmp2
				TIME=`grep Duration $WORKDIR/tmp2 | awk '{print $2}' | cut -d "." -f 1`
				echo "gtk-media-play|($NR)_$NEW|$TIME" >> $WORKDIR/burn
			fi
		fi
	done < $WORKDIR/tmp
else
	if [ "$BURNLIST_DIR" = "$TMPDIR" ]; then
		echo -n > $WORKDIR/burn #cd root /
	else
		echo "|.." > $WORKDIR/burn
	fi
	find -L "$BURNLIST_DIR" -maxdepth 1 -mindepth 1 -type d -printf "gtk-directory|%f/|" -exec du -shLx {} \; | awk -F '/' '{print $1"/"$2}' | sort >> $WORKDIR/burn
	find -L "$BURNLIST_DIR" -maxdepth 1 -mindepth 1 -type f -printf "gtk-file|%f|" -exec du -shLx {} \; | awk -F '/' '{print $1}' | sort >> $WORKDIR/burn
	#assume that symlinks from imported session are the ONLY broken links. will show other broken links too
	find -L "$BURNLIST_DIR" -maxdepth 1 -mindepth 1 -type l -printf "gtk-cdrom|%f|\n" | sort >> $WORKDIR/burn
fi
}

build_chooser_list () {
#if no / is defined --> search
if [ "`echo "$DIR" | grep -v '/'`" ]; then
	$APPDIR/func -search
	exit
fi
#---
DIR="`echo "/$DIR/" | sed -e "s%///%/%g" | sed -e "s%//%/%g"`" #ensure that $DIR has the leading and trailing /
echo "$DIR" > $WORKDIR/dir #update dir-entry in gui
#heading
if [ "$DIR" = '/' ]; then
	echo -n > $WORKDIR/ls
else
	echo "gtk-go-up|..|.                                      .|.." > $WORKDIR/ls #add .. prefix
fi
#---
[ ! -d "$DIR" ] && "|$LOC_ERROR" > $WORKDIR/ls #check if valid dir-name
#add items
if [ `cat $WORKDIR/SHOW_HIDDEN` = true ]; then #show also hidden files
	find "$DIR" -maxdepth 1 -mindepth 1 -type d -follow -printf "gtk-directory|%f|.                                      .|%p/\n" \
	  -o -type f -follow -printf "gtk-file|%f|.                                      .|%p\n" | sort >> $WORKDIR/ls
else
	find "$DIR" -maxdepth 1 -mindepth 1 -type d -follow \! -name .\* -printf "gtk-directory|%f|.                                      .|%p/\n" \
	  -o -type f -follow \! -name .\* -printf "gtk-file|%f|.                                      .|%p\n" | sort >> $WORKDIR/ls
fi
}

case $PAR in
-update_sizebar)
	#important to first detect if tray is open. Reading furter will autoload tray and user will loose control.
	TMP="`cddetect_quick -d$BURNDEV`"
	case "$TMP" in
		*drive\ not\ ready*)
			echo 100
			echo "$LOC354"
			TMP="`ps`"
			[ "`echo "$TMP" | grep -E "$CDRECORD|growisofs"`" ] && exit 
			;;
		*tray\ open*|no\ disc*)
			echo 100
			echo "$LOC387"
			exit
			;;
	esac
	BURNLIST_MODE=($(<"$WORKDIR/BURNLIST_MODE"))
	#calculation of added data in burnlist
	echo -n > $WORKDIR/isosize
	case $BURNLIST_MODE in
		video_ts|data)
			[ `wc -c $WORKDIR/burn | awk '{print $1}'` -gt 1 ] && du -sbLx "$TMPDIR" | awk '{print " "$1}' > $WORKDIR/isosize
			;;
		audio|video)
			#calculate length by sum up columns
			HOUR=`cut -d'|' -f3 $WORKDIR/burn | awk -F: '{ SUM += $1} END { print SUM*60*60 }'`
			MIN=`cut -d'|' -f3 $WORKDIR/burn | awk -F: '{ SUM += $2} END { print SUM*60 }'`
			SEC=`cut -d'|' -f3 $WORKDIR/burn | awk -F: '{ SUM += $3} END { print SUM }'`
			LENGTH=$(($HOUR+$MIN+$SEC))
			echo $(($LENGTH/60)) > $WORKDIR/isosize
			;;
	esac
	#---
	ISOSIZE=($(<"$WORKDIR/isosize")); [ ! "$ISOSIZE" ] && ISOSIZE=0 #content of data in burnlist
	cp -f $WORKDIR/burn $WORKDIR/burn_old #while-loop compares burn_old and burn to detect changes in burnlist
	if [ "`cddetect_quick -d$BURNDEV`" = "tray open" ]; then
		MEDIATYPE=none
	else
		#check disc if status is changed
		[ "`cddetect_quick -d$BURNDEV`" != "`cat $WORKDIR/cddetect 2> /dev/null`" ] && $APPDIR/func -check_media
		MEDIATYPE=($(<"$WORKDIR/MEDIATYPE"))
		MEDIASIZE=($(<"$WORKDIR/MEDIASIZE"))
		MEDIASIZE_FREE=($(<"$WORKDIR/MEDIASIZE_FREE"))
	fi
	cddetect_quick -d$BURNDEV > $WORKDIR/cddetect
	#echo output to progressbar
	case $BURNLIST_MODE in
	audio|video) #audio/video
		case $MEDIATYPE in
			none) #no disc insterted
				echo 100 #Red progress bar
				echo "$LOC387 - $LOC223: $ISOSIZE $LOC218"
				exit
				;;
			DVD-rom)
				echo 100 #Red progress bar
				echo "DVD-rom - $LOC223: $ISOSIZE $LOC218"
				exit
				;;
			CDDA) #audio-CD
				echo 100 #Red progress bar
				echo "$LOC122 - $LOC223: $ISOSIZE $LOC218"
				exit
				;;
		esac
		if [ $BURNLIST_MODE = audio ]; then
			[ "$MEDIASIZE" -gt "1000000000" ] && MEDIATYPE="$LOC224" #DVD - not valid audio CD
			if [ "$MEDIASIZE" -gt "700000000" ]; then MEDIASIZE=80; else MEDIASIZE=74; fi
			USED_PERCENT=$(($ISOSIZE*100/$MEDIASIZE))
			echo "$USED_PERCENT"
			echo "$MEDIATYPE: $MEDIASIZE $LOC218 - $LOC223: $ISOSIZE $LOC218"
		else #video
			echo "0"
			echo "$LOC223: $ISOSIZE $LOC218"
		fi
		;;
	video_ts|data) #data and video_ts
		#define human values
		if [ "$ISOSIZE" -gt "1000000000" ]; then
			ISOSIZE_HUMAN="`echo "scale=2; $ISOSIZE / 1024 / 1024 / 1024" | bc -l` Gb"
		else
			ISOSIZE_HUMAN="`echo "scale=2; $ISOSIZE / 1024 / 1024" | bc -l` Mb"
		fi
		#---
		case $MEDIATYPE in
		none) #no disc insterted
			echo 100 #Red progress bar
			echo "$LOC387 - $LOC223: $ISOSIZE_HUMAN"
			;;
		DVD-rom)
			echo 100 #Red progress bar
			echo "DVD ($LOC225) - $LOC223: $ISOSIZE_HUMAN"
			exit
			;;
		CDDA)
			echo 100 #Red progress bar
			echo "$LOC122 ($LOC225) - $LOC223: $ISOSIZE_HUMAN"
			exit
			;;
		*)
			#closed discs are incompatible
			if [ ! "`echo $MEDIASIZE_FREE | grep [0-9]`" ]; then
				echo "100"
				echo "$MEDIATYPE: $MEDIASIZE_FREE - $LOC223: $ISOSIZE_HUMAN"
				exit
			fi
			FREE_SPACE=$(($MEDIASIZE_FREE-$ISOSIZE-2048000)) #calculate free space on disc. 2048000 is 2Mb which is meant for toc-options like rockridge, udf, joliet, isolevel3...
			#calculate % for progressbar
			TMP=$(($MEDIASIZE-$FREE_SPACE))
			USED_PERCENT=$(($TMP*100/$MEDIASIZE))
			#Human values
			if [ "$MEDIASIZE" -gt "1000000000" ]; then
				MEDIASIZE_HUMAN="`echo "scale=2; $MEDIASIZE / 1024 / 1024 / 1024" | bc -l` Gb"
			else
				MEDIASIZE_HUMAN="`echo "scale=2; $MEDIASIZE / 1024 / 1024" | bc -l` Mb"
			fi
			if [ "$FREE_SPACE" -gt "1000000000" ]; then
				FREE_SPACE_HUMAN="`echo "scale=2; $FREE_SPACE / 1024 / 1024 / 1024" | bc -l` Gb"
			else
				FREE_SPACE_HUMAN="`echo "scale=2; $FREE_SPACE / 1024 / 1024" | bc -l` Mb"
			fi
			#---
			echo "$USED_PERCENT"
			echo "$MEDIATYPE: $MEDIASIZE_HUMAN . . . . $LOC222: $FREE_SPACE_HUMAN"
		esac
		;;
	esac
	;;
-help)
	TMP=$LANGUAGE
	[ "$LANGUAGE" = "auto" ] && TMP="`ls -1 $APPDIR/locals/ | grep $LANG`"
	if [ -f /usr/share/doc/pburn/$TMP.html ]; then
		$BROWSER /usr/share/doc/pburn/$TMP.html
	else
		$BROWSER /usr/share/doc/pburn/en_US:english.html
	fi
	;;
-slideshow_time)
	NR=$(ls -1 "$OUTDIR"/pburn_tmp | grep -iEc "$IMAGE_FORMATS")
	echo "$LOC710 $LOC715:|"$(($SLIDETIME*$NR))" $LOC714" > $WORKDIR/slideshow_time
	ffmpeg -i "$BACKGROUND_MUSIC" 2> $WORKDIR/tmp
	TIME=`grep Duration $WORKDIR/tmp | awk '{print $2}' | cut -d "." -f 1 | cut -d ":" -f 2-`
	MIN=${TIME%:*}
	SEC=${TIME#*:}
	if [ "$MIN" ]; then TMP2=$(($MIN*60)); TMP=$(($TMP2+$SEC)); else TMP=$SEC; fi
	if [ ! "$TMP" ]; then
		echo "$LOC712:|? $LOC714" >> $WORKDIR/slideshow_time
	else
		echo "$LOC712:|$TMP $LOC714" >> $WORKDIR/slideshow_time
	fi
	;;
-slideshow)
	echo $2 > $WORKDIR/CHK_SLIDESHOW
	;;
-c2scan)
	IMG=cdrom; FRAME="$LOC134"; TXT1="<span size='"'x-large'"'>$LOC134</span>"; TXT2="$LOC500"
	type readcd > /dev/null 2>&1 || TXT1="<b><span color='"'red'"'>$LOC348: readcd</span></b>"
	. $APPDIR/box -yesno
	if [ $EXIT = Yes ]; then
		#check if CD is inserted
		. $APPDIR/func -check_media
		MEDIATYPE=($(<"$WORKDIR/MEDIATYPE"))
		if [ "$MEDIATYPE" != "CD" ]; then
			TXT1="<b>$LOC345</b>"
			TXT2="$LOC261: $BURNDEV"
			. $APPDIR/box
			exit
		fi
		#start check
		echo 'exec readcd -c2scan -ts=32k dev='"$BURNDEV"' "$@"' > $WORKDIR/exec_c2scan
		chmod 700 $WORKDIR/exec_c2scan
		echo -n > $LOG
		$WORKDIR/exec_c2scan > $LOG 2>&1 &
		export TAIL_TITLE="$LOC134"; TAIL_BUTTON="$LOC_OK"
		. $APPDIR/box_tail
	fi
	;;
-fixate_CD)
	IMG=cdrom; FRAME="$LOC135"; TXT1="<span size='"'x-large'"'>$LOC135 CD</span>"; TXT2="$LOC505"
	. $APPDIR/box -yesno
	if [ $EXIT = Yes ]; then
		echo "exec $CDRECORD -fix dev=$BURNDEV" > $WORKDIR/exec_fixate
		chmod 700 $WORKDIR/exec_fixate
		echo -n > $LOG
		$WORKDIR/exec_fixate > $LOG 2>&1 &
		export TAIL_TITLE="$LOC135"; TAIL_BUTTON="$LOC_OK"
		. $APPDIR/box_tail
	fi
	;;
-fixate_DVD)
	IMG=cdrom; FRAME="$LOC135"; TXT1="<span size='"'x-large'"'>$LOC135 DVD</span>"; TXT2="$LOC505"
	type close >/dev/null 2>&1 || TXT1="<b><span color='"'red'"'>$LOC348: close</span></b>"
	. $APPDIR/box -yesno
	if [ $EXIT = Yes ]; then
		echo "exec close $BURNDEV" > $WORKDIR/exec_fixate
		chmod 700 $WORKDIR/exec_fixate
		echo -n > $LOG
		$WORKDIR/exec_fixate > $LOG 2>&1 &
		export TAIL_TITLE="$LOC135"; TAIL_BUTTON="$LOC_OK"
		. $APPDIR/box_tail
	fi
	;;
-cdtext)
	#splash
	echo "$LOC295" > $WORKDIR/splashtext
	$APPDIR/box_splash &
	#---
	echo -n > $WORKDIR/cdtext
	echo -n > $WORKDIR/CDTEXT_ALBUM_ARTIST
	echo -n > $WORKDIR/CDTEXT_ALBUM_TITLE
	INDRIVE="${INDRIVE%%|*}"
	[ ! "$INDRIVE" ] && INDRIVE=$BURNDEV
	cd "$OUTDIR"
	rm *.inf; rm *.wav; rm *.raw
	if type icedax >/dev/null 2>&1; then RIPPER=icedax; else RIPPER=cdda2wav; fi
	$RIPPER dev=$INDRIVE -vall cddb=1 -B -info-only "$OUTDIR/pburn" > $WORKDIR/tmp 2>&1 &
	#wait until operation is finished
	sleep 2 #do not start check at once in case device has slow spinup
	while [ "`cat $WORKDIR/splash`" = 0 ]; do
		TMP="`ps`"
		if grep -Fq 'no audio' $WORKDIR/tmp || grep -Fq 'Read TOC size failed' $WORKDIR/tmp || grep -Fq 'load cdrom' $WORKDIR/tmp ; then
			echo 100 > $WORKDIR/splash
			TXT1="<b>$LOC347</b>"
			TXT2="$LOC261: $BURNDEV"
			. $APPDIR/box
		fi
		case $TMP in *$RIPPER*) ;; *) echo 100 > $WORKDIR/splash;; esac
	done
	#remove ISRC info in file since it corrupts burning
	ls -1 "$OUTDIR" | grep -F '.inf' > $WORKDIR/tmp
	while read I; do
		grep 'Albumperformer=' "$I" > $WORKDIR/tmp2
		grep 'Performer=' "$I" >> $WORKDIR/tmp2
		grep 'Albumtitle=' "$I" >> $WORKDIR/tmp2
		grep 'Tracktitle=' "$I" >> $WORKDIR/tmp2
		grep 'Tracknumber=' "$I" >> $WORKDIR/tmp2
		cp $WORKDIR/tmp2 "$I"
	done < $WORKDIR/tmp
	#---
	ls -1A *.inf > $WORKDIR/tmp
	while read I; do
		ARTIST=`grep Performer "$I" | cut -d "'" -f 2- | sed -e "s/'[^']*$//"`
		TITLE=`grep Tracktitle "$I" | cut -d "'" -f 2- | sed -e "s/'[^']*$//"`
		grep Albumperformer "$I" | cut -d "'" -f 2- | sed -e "s/'[^']*$//" > $WORKDIR/CDTEXT_ALBUM_ARTIST
		grep Albumtitle "$I" | cut -d "'" -f 2- | sed -e "s/'[^']*$//" > $WORKDIR/CDTEXT_ALBUM_TITLE
		if [ "$ARTIST" ]; then
			echo "$ARTIST - $TITLE" >> $WORKDIR/cdtext
		fi
	done < $WORKDIR/tmp
	;;
-move_up_down)
	if [ -z "$BURNLIST" ]; then
		BURNLIST="`cat $WORKDIR/BURNLIST`" #if it has been moved before
		if [ -z "$BURNLIST" ]; then
			TXT1="<b>$LOC381</b>"
			. $APPDIR/box
			exit
		fi
	fi
	INDEX=`echo $BURNLIST | cut -d ")" -f 1 | sed -e "s/(//g"`
	if [ $DIRECTION = up ]; then
		INDEX_NEW=`expr $INDEX - 1`
	else
		INDEX_NEW=`expr $INDEX + 1`
	fi
	[ ${#INDEX_NEW} -eq 1 ] && INDEX_NEW="0$INDEX_NEW" #ensure 2 digits
	TMP="($INDEX_NEW)"
	SWAP=`grep -F "($INDEX_NEW)" $WORKDIR/burn | cut -d "|" -f 2`
	if [ "$SWAP" ]; then #reached top / bottom
		SWAP_NEW=`echo "$SWAP" | sed -e "s/(..)/($INDEX)/g"`
		BURNLIST_NEW=`echo $BURNLIST | sed -e "s/(..)/($INDEX_NEW)/g"`
		mv "$BURNLIST_DIR/$BURNLIST" "$BURNLIST_DIR/$BURNLIST_NEW"
		mv "$BURNLIST_DIR/$SWAP" "$BURNLIST_DIR/$SWAP_NEW"
		build_burn_list
		#store new name for next move
		TMP=`echo $BURNLIST_NEW | sed -e "s/(..)_//"`
		grep "$TMP" $WORKDIR/burn | cut -d '|' -f 2 > $WORKDIR/BURNLIST
	fi
	;;
-logbox)
	if [ "`which Xdialog`" ]; then 
		X_POS=$[$WIDTH_SCREEN-630]
		if [ $X_POS -gt 750 ]; then X_POS=750; fi
		Xdialog --title "Pburn - $LOC433" --screen-center --fixed-font --no-ok --cancel-label "$LOC430" --tailbox $LOG 450x400
		EXIT_CODE=$?
		while true; do
			if [ $EXIT_CODE != 255 ];then #kill prosess
				rm $WORKDIR/* > /dev/null 2>&1
				echo end > $WORKDIR/end_while #stop disc_checking_daemon (progressbar)
				#kill all pburn processes
				for I in `ps | grep -wE "$MKISOFS|$CDRECORD|$CDDA2WAV|growisofs|diff|ffmpeg|dd|vobcopy|vamps" | awk '{print $1}'`; do kill -9 $I; done
				rm -f "$OUTDIR/the_video_you_wanted1.vob.partial" > /dev/null 2>&1
				#kill Pburn itself
				for I in `ps | grep -i "pburn" | awk '{print $1}'`; do kill -9 $I; done
				break
			fi
		done
	else #use gtkdialog and my homemade tailbox.
		export TAIL_TITLE="$LOC433"; TAIL_BUTTON="$LOC430"
		. $APPDIR/box_tail
		if [ "$EXIT" = "tail_button" ]; then
			rm -f $WORKDIR/pburn* > /dev/null 2>&1
			#kill all pburn processes
			for I in `ps -eo pid,command | grep -wE "$MKISOFS|$CDRECORD|$CDDA2WAV|growisofs|diff|ffmpeg|dd|vobcopy|vamps" | awk '{print $1}'`; do kill -9 $I; done
			rm $WORKDIR/* > /dev/null 2>&1
			#kill Pburn itself
			for I in `ps -eo pid,command | grep -i "pburn" | awk '{print $1}'`; do kill -9 $I; done
		fi
	fi
	;;
-kill)
	;;
-calculate_needed_space) #only used by gui when changing burn-mode
	#show splash
	if [ $BURN_DATA = false ] && [ "`cat $WORKDIR/burn | wc -l`" -gt "1" ]; then
		echo "$LOC336" > $WORKDIR/splashtext
		$APPDIR/box_splash &
	fi
	#go to CDs root-dir. Audio/video supports only files on root-dir.
	export BURNLIST_DIR=$TMPDIR
	echo "$BURNLIST_DIR" > $WORKDIR/burnlist_dir
	#remove audio numbers
	if [ $BURN_DATA = true ]; then
		ls -A "$BURNLIST_DIR" > $WORKDIR/tmp
		while read I; do
			ITEM="${I%%|*}"
			NEW=`echo "$ITEM" | sed -e "s/(..)_//g"` #remove old number
			mv "$BURNLIST_DIR/$ITEM" "$BURNLIST_DIR/$NEW"
		done < $WORKDIR/tmp
	fi
	echo ' ' > $WORKDIR/isosize
	build_burn_list
	echo 100 > $WORKDIR/splash
	;;
-disc_info)
	#check if mounted
	. $APPDIR/func -check_media
	MOUNT="`mount | grep $BURNDEV | cut -d' ' -f3`"
	if [ "$MOUNT" ]; then #mounted
		MOUNTPOINT="$MOUNT"
	else
		MOUNTPOINT="$HOME/.pburn/mnt/"
		mount $BURNDEV $MOUNTPOINT -t auto 2> /dev/null
	fi
	#check content/md5sum
	ls -1pA --group-directories-first $MOUNTPOINT > $WORKDIR/tmp
	MD5SUM="$LOC508" #not available
	if [ -s $WORKDIR/tmp ]; then
		MD5SUM="$( ls $MOUNTPOINT | md5sum | cut -f 1 -d " " )"
	else
		if [ "$MEDIASIZE" ]; then  #blank disc
			echo "$LOC126" > $WORKDIR/tmp
		else  #closed disc or no disc insterted
			echo "$LOC512" > $WORKDIR/tmp
		fi
	fi
	#---
	[ ! "$MOUNT" ] && umount $MOUNTPOINT	
	IMG=cdrom; FRAME="$LOC136"
	TXT1="<span size='"'x-large'"'>$LOC136</span>"
	[ "$MEDIATYPE_FULL" ] && MEDIATYPE="$MEDIATYPE_FULL"
	TXT2="$LOC236: $MEDIATYPE
$LOC509: $MEDIASIZE
$LOC510: $MEDIASIZE_FREE
$LOC507: $MD5SUM

$LOC506:"
	EXTENDED_GTKDIALOG="
	<edit editable=\"false\" left_margin=\"10\">
	 <input file>$WORKDIR/tmp</input>
   	 <visible>disabled</visible>
   	 <width>100</width><height>100</height>
   	</edit>"
   	echo 100 > $WORKDIR/splash #if called from 'pburn -m info' we now close the initial splash 
	. $APPDIR/box
	;;
-import_session)
	. $CONFIG #reload configs in case user changed device setting
	#splash
	echo "$LOC315 $BURNDEV" > $WORKDIR/splashtext
	$APPDIR/box_splash &
	#Error checks
	if [ ! "$BURNDEV" ]; then #no burner
		TXT1="<b>$LOC393</b>"
		. $APPDIR/box
		echo 100 > $WORKDIR/splash #kill progress bar
		exit
	fi
	if mount | grep -Fq "$BURNDEV" ; then #mounted
		TXT1="$LOC375"
		. $APPDIR/box
		echo 100 > $WORKDIR/splash #kill progress bar
		exit
	fi
	#---
	mount $BURNDEV $HOME/.pburn/mnt -t auto 2> /dev/null
	# /tmp/pburn-import_session keeps ls -AR, while tmp/pburn-import keeps ls -A
	echo -n > $WORKDIR/import_session
	find $HOME/.pburn/mnt/ -mindepth 1 -printf "%p\n" >> $WORKDIR/import_session #surrugat for ls -AR
	sed -i -e "s%$HOME/.pburn/mnt%%g" $WORKDIR/import_session
	#---
	ls -A $HOME/.pburn/mnt/ > $WORKDIR/import
	while read I; do
		cp -srpf "$HOME/.pburn/mnt/$I" "$TMPDIR"
	done < $WORKDIR/import
	umount $HOME/.pburn/mnt
	build_burn_list
	. $APPDIR/func -check_media
	echo 100 > $WORKDIR/splash
	;;
-import_iso)
	if mount | grep -q 'pburn' ; then #iso already mounted
		TXT1="$LOC321"
		. $APPDIR/box
		exit
	fi
	TITLE="$LOC107"
	. $APPDIR/box_chooser
	if [ "$EXIT" = "OK" ]; then
		if [ ! -s "$CHOOSER" ]; then #file not found
			TXT1="<b>$LOC383</b>"
			. $APPDIR/box
		else
			mount -t auto -o loop "$CHOOSER" $HOME/.pburn/mnt
			ls -A $HOME/.pburn/mnt/ > $WORKDIR/tmp
			while read I; do
				cp -srpf "$HOME/.pburn/mnt/$I" "$BURNLIST_DIR"
				echo -e "$GRAFT_POINT_DIR$I=$HOME/.pburn/mnt/$I" >> $WORKDIR/graft_points 
			done < $WORKDIR/tmp
			build_burn_list
		fi
	fi
	;;
-info_burn)
	[ "$BURN_DATA" = "true" ] && echo -e "$LOC215\c" > $WORKDIR/info
	[ "$BURN_AUDIO" = "true" ] && echo -e "$LOC216\c" > $WORKDIR/info
	[ "$BURN_VIDEO" = "true" ] && echo -e "$LOC217\c" > $WORKDIR/info
	;;
-browser_go_to_dir)
	build_chooser_list
	;;
-browser_change_dir)
	if [ "$CHOOSER" != ".." ]; then
		TMP="`find "$CHOOSER" -maxdepth 0 -type d -follow`" 2> /dev/null #check if hit is directory
		if [ ! "$TMP" ]; then #it's a file - MIME
			TMP=`find "$CHOOSER" -maxdepth 1 -follow`
			$APPDIR/func -execute "$TMP" &
			exit
		else
			DIR="$TMP"
		fi
	else
		DIR=`dirname "$DIR"`/
	fi
	build_chooser_list
	;;
-add)
	#---
	if [ "$BUTTON" != "3" ] || [ "$CHOOSER" = ".." ]; then exit; fi
	cut -d '|' -f 4 $WORKDIR/ls > $WORKDIR/tmp2
	if [ ! "$CHOOSER" ] && [ "$ADD" = "$LOC150 [$LOC211]" ]; then #nothing is selected
		echo -n > $WORKDIR/tmp
	else
		[ "$ADD" = "$LOC150 [$LOC211]" ] && grep -Fx -m1 -- "$CHOOSER" $WORKDIR/tmp2 | sed 's|\\|\\\\|g' > $WORKDIR/tmp #Dougal: support filenames with \ or starts with - 
	fi
	[ "$ADD" = "$LOC151" ] && grep -iE "$AUDIO_FORMATS" $WORKDIR/tmp2 > $WORKDIR/tmp
	[ "$ADD" = "$LOC152" ] && grep -iE "$VIDEO_FORMATS" $WORKDIR/tmp2 > $WORKDIR/tmp
	[ "$ADD" = "$LOC153" ] && grep -iE "$IMAGE_FORMATS" $WORKDIR/tmp2 > $WORKDIR/tmp
	[ "$ADD" = "$LOC154" ] && grep -vx '..' $WORKDIR/tmp2 > $WORKDIR/tmp
	if [ ! -s $WORKDIR/tmp ]; then #Add from menu could give 'nothing to add'
		TXT1="$LOC332"
		. $APPDIR/box
		exit
	fi
	#check audio format
	if ! grep -iEq "$AUDIO_FORMATS" $WORKDIR/tmp && [ "$BURN_AUDIO" = "true" ]; then
		TXT1="$LOC324"
		. $APPDIR/box
		exit
	fi
	#check video format
	if ! grep -iEq "$VIDEO_FORMATS|$IMAGE_FORMATS|video_ts|audio_ts" $WORKDIR/tmp && [ "$BURN_VIDEO" = "true" ]; then
		TXT1="$LOC324"
		. $APPDIR/box
		exit
	fi
	#if add more than 5 items or dir --> show splash
	if [ "`cat $WORKDIR/tmp | wc -l`" -gt 5 ] || [ -d "$CHOOSER" ]; then
		echo "$LOC336" > $WORKDIR/splashtext
		$APPDIR/box_splash &
	fi
	while read I; do
		TMP=`basename "$I"`
		if [ "`grep -F "|$TMP|" $WORKDIR/burn`" ] || [ "`grep -F "|$TMP/|" $WORKDIR/burn`" ]; then #already exist
			echo 100 > $WORKDIR/splash
			export TXT1="<b>$LOC349:</b> $I"
			$APPDIR/box &
			continue
		fi
		cp -srpf "$I" "$BURNLIST_DIR"
		echo "$GRAFT_POINT_DIR$TMP=$I" >> $WORKDIR/graft_points
	done < $WORKDIR/tmp
	build_burn_list
	echo 100 > $WORKDIR/splash #reset progress bar
	;;
-add_list)
	if [ "$GO_CHOOSER" = "true" ]; then #import list from file-menu
		TITLE="$LOC102"
		. $APPDIR/box_chooser
		if [ "$EXIT" = "OK" ]; then
			if [ ! -s "$CHOOSER" ]; then #file not found
				TXT1="<b>$LOC383</b>"
				. $APPDIR/box
				exit
			fi
		else
			exit
		fi 
	fi
	if [ ! -s "$CHOOSER" ]; then
		echo 100 > $WORKDIR/splash #kill splash in case user run from terminal with -i parameter
		TXT1="<b>$LOC377</b>"
		. $APPDIR/box
		exit
	fi
	#playlist
	grep -v "#EXT" "$CHOOSER" > $WORKDIR/import_list #remove metadata of playlist
	if [ -z "`grep -Ev "$AUDIO_FORMATS" $WORKDIR/import_list`" ]; then
		IMG="sort-ascending"; TXT1="$LOC378"
		. $APPDIR/box -yesno
	fi
	echo "$LOC312" > $WORKDIR/splashtext
	$APPDIR/box_splash &
	sleep 0.3 #for splash to rerender
	#number items
	COUNT=0
	while read I; do
		COUNT=$((COUNT+1)); NR=$COUNT
		[ ${#COUNT} -eq 1 ] && NR="0$COUNT"
		ITEM=`echo "$I" | cut -d "|" -f 2 | sed -e "s%\r%%g"`
		ITEM_NAME=`basename "$ITEM"`
		[ ! "$ITEM" ]&& break
		case $ITEM in
		*/*) #path exist
			if [ $EXIT = Yes ]; then #number output
				cp -srpf "$ITEM" "$BURNLIST_DIR/($NR)_$ITEM_NAME"
				echo "$GRAFT_POINT_DIR""($NR)_$ITEM_NAME=$ITEM" >> $WORKDIR/graft_points
			else
				cp -srpf "$ITEM" "$BURNLIST_DIR"
				echo "$GRAFT_POINT_DIR$ITEM_NAME=$ITEM" >> $WORKDIR/graft_points 
			fi
			;;
		*) #no path for files in list. Use current dir
			TMP=`dirname "$CHOOSER"`
			if [ "$EXIT" = "Yes" ]; then #number output
				cp -srpf "$TMP/$ITEM" "$BURNLIST_DIR/($NR)_$ITEM_NAME"
				echo "$GRAFT_POINT_DIR""($NR)_$ITEM_NAME=$TMP/$ITEM" >> $WORKDIR/graft_points 
			else
				cp -srpf "$TMP/$ITEM" "$BURNLIST_DIR"
				echo "$GRAFT_POINT_DIR$ITEM_NAME=$TMP/$ITEM" >> $WORKDIR/graft_points 
			fi
			;;
		esac
	done < $WORKDIR/import_list
	build_burn_list
	echo 100 > $WORKDIR/splash
	;;
-pfilesearch)
	pfilesearch -b -d "$SEARCHPATH"
	#generate results
	echo -n > $WORKDIR/tmp
	while read I; do
		find "$I" -maxdepth 1 -type d -printf "gtk-directory|%f|.                                      .|%p\n" \
		  -o -type f -printf "gtk-file|%f|.                                      .|%p\n" >> $WORKDIR/tmp
	done < $HOME/.pfilesearch/hits
	sort -u --output=$WORKDIR/ls $WORKDIR/tmp
	;;
-search)
	#check search
	if ! type pfilesearch >/dev/null; then TXT1="$LOC319"; . $APPDIR/box; exit; fi
	#define MIME groups from Pfilesearch
	export EXTMUSIC="('"`grep music= $HOME/.pfilesearch/pfilesearchMIMErc | sed -e s/^.*\=//g | sed -e 's/ ./$\\\|\\\./g'`"$ ')"
	export EXTVIDEO="('"`grep video= $HOME/.pfilesearch/pfilesearchMIMErc | sed -e s/^.*\=//g | sed -e 's/ ./$\\\|\\\./g'`"$ ')"
	export EXTPIC="('"`grep picture= $HOME/.pfilesearch/pfilesearchMIMErc | sed -e s/^.*\=//g | sed -e 's/ ./$\\\|\\\./g'`"$ ')"
	#search
	pfilesearch -b -c "$DIR" -d "$SEARCHPATH"
	#generate results
	echo -n > $WORKDIR/tmp
	while read I; do
		find "$I" -maxdepth 1 -type d -printf "gtk-directory|%f|.                                      .|%p\n" \
		  -o -type f -printf "gtk-file|%f|.                                      .|%p\n" >> $WORKDIR/tmp
	done < $HOME/.pfilesearch/hits
	sort -u --output=$WORKDIR/ls $WORKDIR/tmp
	;;
-burnlist_right-menu)
	if [ $BUTTON = 3 ]; then
		[ ! "$BURNLIST" ] && exit #click on blank area
		echo -n > $WORKDIR/OUTPUT
		export gtkdialog_menu='
<window title="menu" decorated="false" skip_taskbar_hint="true" window_position="2" height-request="85">
 <vbox>
  <hbox>
   <vbox>
    <pixmap height-request="20" icon_size="1"><input file stock="gtk-remove"></input></pixmap>
    <pixmap height-request="20" icon_size="1"><input file stock="gtk-open"></input></pixmap>
    <pixmap height-request="20" icon_size="1"><input file stock="gtk-convert"></input></pixmap>
    <text height-request="2"><label>""</label></text>
   </vbox>
   <vbox>
    <button height-request="20" xalign="0" can-focus="no" relief="2"><label>'$LOC113'</label><action>echo '$LOC113' > '$WORKDIR'/OUTPUT</action><action>EXIT:exit</action></button>
    <button height-request="20" xalign="0" can-focus="no" relief="2"><label>'$LOC111'</label><action>echo '$LOC111' > '$WORKDIR'/OUTPUT</action><action>EXIT:exit</action></button>
    <button height-request="20" xalign="0" can-focus="no" relief="2"><label>'$LOC112'</label><action>echo '$LOC112' > '$WORKDIR'/OUTPUT</action><action>EXIT:exit</action></button>
    <entry height-request="2"></entry>
   </vbox>
  </hbox>
 </vbox>
 <action signal="focus-out-event">EXIT:exit</action>
</window>'
		$GTKDIALOG -p gtkdialog_menu
		OUTPUT=($(<"$WORKDIR/OUTPUT"))  #send output to stdout
		case $OUTPUT in
			"$LOC111")	. $APPDIR/func -burnlist_create_new_dir;;
			"$LOC112")	. $APPDIR/func -burnlist_rename;;
			"$LOC113")	. $APPDIR/func -burnlist_remove;;
		esac
	fi
	;;
-burnlist_change_dir)
	if [ "$BURNLIST" != ".." ]; then
		TMP=`file -L "$BURNLIST_DIR/$BURNLIST" | grep directory` #is hit a directory
		if [ ! "$TMP" ]; then  #it's a file - MIME
			if grep -x "/$BURNLIST" $WORKDIR/import_session 2> /dev/null; then
				TXT1="$LOC331"
				. $APPDIR/box
				exit
			fi
			$APPDIR/func -execute "$BURNLIST_DIR/$BURNLIST" &
		else
			export BURNLIST_DIR="`echo "$BURNLIST_DIR/$BURNLIST" | sed -e "s%//%/%g"`" #in case //
			echo "$BURNLIST_DIR" > $WORKDIR/burnlist_dir
			build_burn_list
		fi
	else
		export BURNLIST_DIR=`dirname "$BURNLIST_DIR"`
		echo "$BURNLIST_DIR" > $WORKDIR/burnlist_dir
		build_burn_list
	fi
	;;
-burnlist_create_new_dir)
	FRAME="$LOC111"; IMG="new"; TXT1="$LOC379"; echo -n > $WORKDIR/input
	. $APPDIR/box -input
	if [ $EXIT = Apply ]; then
		echo > $WORKDIR/error
		mkdir "$BURNLIST_DIR"/"$INPUT" 2> $WORKDIR/error
		TXT1="`cat $WORKDIR/error`"
		if [ "$TXT1" ]; then
			. $APPDIR/box #error
			exit
		fi
		echo "$BURNLIST_DIR"/"$INPUT" | sed -e "s%//%/%g" >> $WORKDIR/main_dirs
		build_burn_list
	fi
	;;
-burnlist_rename)
	#check if trying to rename an already burnt item
	TMP="`echo "$GRAFT_POINT_DIR$BURNLIST/" | sed -e 's%//%/%g' | sed -e 's/\/[^\/]*$//'`" #remove last / if exist
	if grep -x "$TMP" $WORKDIR/import_session 2> /dev/null; then #can't rename from imported session
		TXT1="$LOC380"
		. $APPDIR/box
		exit
	fi
	#Nothing is selected
	if [ -z "$BURNLIST" ]; then
		TXT1="<b>$LOC381</b>"
		. $APPDIR/box
		exit
	fi
	#---
	FRAME="$LOC112"; IMG="convert"; TXT1="$BURNLIST"; echo "$BURNLIST" | tr -d '/' | tr -d '\`' > $WORKDIR/input
	. $APPDIR/box -input
	BURNLIST="`echo "$BURNLIST/" | sed -e 's%//%/%g' | sed -e 's/\/[^\/]*$//'`" #remove last / if exist
	BURNLIST_DIR="`echo "$BURNLIST_DIR/" | sed -e 's%//%/%g' | sed -e 's/\/[^\/]*$//'`" #remove last / if exist
	
	#Find source -- prefer to use grep -E to ensure we start at first char.....
	SOURCE="`grep -E "^${BURNLIST}=" $WORKDIR/graft_points | cut -d= -f2`"
	#....but if filename contains chars that also is res.expr, it fails
	[ ! "$SOURCE" ] && SOURCE="`grep -F "${BURNLIST}=" $WORKDIR/graft_points | cut -d= -f2`"

	if [ $EXIT = Apply ]; then
		if grep -E "^${INPUT}=" $WORKDIR/graft_points ; then #already exist
			TXT1="<b>$LOC349:</b> $INPUT"
			. $APPDIR/box
			exit
		fi
		#if item is in list, --> remove from graft-points
		TMP="`grep "^$GRAFT_POINT_DIR$BURNLIST=" $WORKDIR/graft_points | cut -d '=' -f 2`"
		if [ "$TMP" ]; then
			grep -v "$TMP" $WORKDIR/graft_points > $WORKDIR/tmp
			mv -f $WORKDIR/tmp $WORKDIR/graft_points
		else #add to exclude list
			echo "$SOURCE" >> $WORKDIR/exclude
		fi
		echo "$GRAFT_POINT_DIR$INPUT=$SOURCE" >> $WORKDIR/graft_points #add new item to list
		mv "$BURNLIST_DIR"/"$BURNLIST" "$BURNLIST_DIR"/"$INPUT" #rename symlink
		build_burn_list
	fi
	;;
-burnlist_remove)
	#check if trying to remove an already burnt item
	SELECTION="`echo "$GRAFT_POINT_DIR$BURNLIST/" | sed -e 's%//%/%g' | sed -e 's/\/[^\/]*$//'`" #remove last / if exist
	if grep -Fqx "$TMP" $WORKDIR/import_session 2> /dev/null; then
		TXT1="$LOC382"
		. $APPDIR/box
		exit
	fi
	#check if any item is selected
	if [ -z "$BURNLIST" ]; then
		TXT1="<b>$LOC381</b>"
		. $APPDIR/box
		exit
	fi
	ITEM=`echo "$BURNLIST" | tr -d /`
	#remove graft-points
	BURNLIST="`echo "$BURNLIST/" | sed -e 's%//%/%g' | sed -e 's/\/[^\/]*$//'`" #remove last / if exist
	BURNLIST_DIR="`echo "$BURNLIST_DIR/" | sed -e 's%//%/%g' | sed -e 's/\/[^\/]*$//'`" #remove last / if exist
	if [ -d "$BURNLIST_DIR/$BURNLIST" ]; then
		#directories is not symlinks, so we must do a workaround to find what to put into the Exclude file
		TMP="` find "$BURNLIST_DIR/$BURNLIST" -maxdepth 1 -mindepth 1 -type l -name "*" -printf "%l\n" | head -n 1`"
		if [ ! "$TMP" ]; then #no file in this directory --> search one level deeper
			TMP2="` find "$BURNLIST_DIR/$BURNLIST" -maxdepth 2 -mindepth 2 -type l -name "*" -printf "%l\n" | head -n 1`"
			TMP="`dirname "$TMP2"`"
		fi
		SOURCE="`dirname "$TMP"`" #use source-file to determine dir
		#---
		BURNLIST="/$BURNLIST/"
	else
		SOURCE=`readlink "$BURNLIST_DIR/$BURNLIST"`
	fi
	if grep "$GRAFT_POINT_DIR$BURNLIST" $WORKDIR/graft_points; then #this also removes items inside a removed dir
		grep -v "$SELECTION" $WORKDIR/graft_points > $WORKDIR/tmp; mv -f $WORKDIR/tmp $WORKDIR/graft_points
	else #add to exclude list
		echo "$SOURCE" >> $WORKDIR/exclude
	fi
	rm -fr "$BURNLIST_DIR/$BURNLIST" > /dev/null 2>&1
	build_burn_list
	;;
-new)
	rm -fr "$TMPDIR"
	rm -fr "$OUTDIR/pburn_tmp" > /dev/null 2>&1
	rm -rf "$OUTDIR/pburn-DVD" > /dev/null 2>&1
	rm $WORKDIR/import_session > /dev/null 2>&1
	rm $WORKDIR/log > /dev/null 2>&1
	rm $WORKDIR/tmp* > /dev/null 2>&1 #temporary files
	mkdir "$TMPDIR" > /dev/null 2>&1
	umount $HOME/.pburn/mnt > /dev/null 2>&1 #imported iso
	#reset burnlist to cd /
	export BURNLIST_DIR="$TMPDIR"
	echo "$BURNLIST_DIR" > $WORKDIR/burnlist_dir
	#---
	echo 0 > $WORKDIR/isosize
	echo -n > $WORKDIR/tmp
	echo -n > $WORKDIR/graft_points 
	echo -n > $WORKDIR/exclude 
	echo -n > $WORKDIR/SAVEFILE
	echo -n > $WORKDIR/OPEN_FILE
	echo -n > $WORKDIR/BACKGROUND_MUSIC
	echo -n > $WORKDIR/CDTEXT_ALBUM_ARTIST
	echo -n > $WORKDIR/CDTEXT_ALBUM_TITLE
	echo -e " " > $WORKDIR/cdtext
	echo 0 > $WORKDIR/datasize_add
	echo 0 > $WORKDIR/datasize_exclude
	echo "$TMPDIR" > $WORKDIR/main_dirs
	echo "$LOC001" > $WORKDIR/open_file
	build_burn_list
	;; 
-open)
	if [ "$OPEN_DIALOG" = "true" ]; then
		TITLE="$LOC102"
		. $APPDIR/box_chooser
		if [ "$EXIT" = "OK" ]; then
			if [ ! -s "$CHOOSER" ]; then #file not found
				TXT1="<b>$LOC383</b>"
				. $APPDIR/box
				EXIT=cancel
			else
				#splash
				echo > $WORKDIR/splashtext
				. $APPDIR/box_splash &
				#---
				. $APPDIR/func -new #clear list
				OPEN_FILE="$CHOOSER"
				echo "$OPEN_FILE" > $WORKDIR/OPEN_FILE
				OPEN_DIALOG=false
			fi
		fi
	fi	
	#open from terminal starts here
	if [ "$EXIT" != "cancel" ]; then
		cd /
		tar -xf "$OPEN_FILE"
		if [ "$?" != "0" ]; then
			TXT1="<b>$LOC384</b>"
			. $APPDIR/box
		fi
		if tar -vtf "$OPEN_FILE" | grep -q "PBURN-audio" ; then  #it's saved as audio-CD
			export BURN_DATA=false
			export BURN_AUDIO=true
			export BURN_VIDEO=false
			echo audio > $WORKDIR/BURNLIST_MODE
			. $APPDIR/func -calculate_time_of_audio_files
		fi
		if tar -vtf "$OPEN_FILE" | grep -q "PBURN-video" ; then  #it's saved as video-DVD
			export BURN_DATA=false
			export BURN_AUDIO=false
			export BURN_VIDEO=true
			echo video > $WORKDIR/BURNLIST_MODE
			. $APPDIR/func -calculate_time_of_audio_files
		fi
		cp "$TMPDIR"/pburn-graftfiles/graft_points $WORKDIR/
		cp "$TMPDIR"/pburn-graftfiles/exclude $WORKDIR/
		cp "$TMPDIR"/pburn-graftfiles/main_dirs $WORKDIR/
		cp "$TMPDIR"/pburn-graftfiles/datasize_add $WORKDIR/
		cp "$TMPDIR"/pburn-graftfiles/datasize_exclude $WORKDIR/
		rm -fr "$TMPDIR"/pburn-graftfiles/
		echo "$OPEN_FILE" > $WORKDIR/open_file
		build_burn_list
	fi
	;;
-save_log) #button in finish-dialog and error-dialog 
	echo "$HOME/Pburn `date "+%d.%b %Y %T"`.log" > $WORKDIR/SAVEFILE
	SAVE_EXT=log; TIMESTAMP=true
	. $APPDIR/box_save
	if [ -s $WORKDIR/SAVEFILE ]; then
		TMP="`cat $WORKDIR/SAVEFILE`"
		echo "Pburn version $VERSION" > "$TMP"
		echo -e "\n###################################################\n   COMMAND:\n###################################################" >> "$TMP"
		cat $WORKDIR/exec_preburn >> "$TMP"
		cat $WORKDIR/exec >> "$TMP"
		echo -e "\n###################################################\n   OUTPUT:\n###################################################" >> "$TMP"
		cat $WORKDIR/log >> "$TMP"
	fi
	;;
-save)
	if [ ! "$SAVEAS" = "true" ]; then
		cp -f $WORKDIR/OPEN_FILE $WORKDIR/SAVEFILE
	else
		echo -n > $WORKDIR/SAVEFILE #empty file will run dialog
	fi
	if [ ! -s $WORKDIR/SAVEFILE ]; then #new file, open dialog
		echo "$HOME/pburn.pbn" > $WORKDIR/SAVEFILE
		SAVE_EXT=pbn
		. $APPDIR/box_save
	fi
	if [ -s $WORKDIR/SAVEFILE ]; then
		TMP=""
		[ "$BURN_AUDIO" = "true" ] && TMP="--label=PBURN-audio" #set tar label
		[ "$BURN_VIDEO" = "true" ] && TMP="--label=PBURN-video"
		#add info files into tar-package
		mkdir "$TMPDIR"/pburn-graftfiles
		cp -f $WORKDIR/graft_points "$TMPDIR"/pburn-graftfiles/
		cp -f $WORKDIR/exclude "$TMPDIR"/pburn-graftfiles/
		cp -f $WORKDIR/main_dirs "$TMPDIR"/pburn-graftfiles/
		cp -f $WORKDIR/datasize_add "$TMPDIR"/pburn-graftfiles/
		cp -f $WORKDIR/datasize_exclude "$TMPDIR"/pburn-graftfiles/
		#---
		SAVEFILE="`cat $WORKDIR/SAVEFILE`"
		tar "$TMP" -cf "$SAVEFILE" "$TMPDIR"
		rm -fr "$TMPDIR"/pburn-graftfiles/
		#define saved file as the active (open) file
		cp -f $WORKDIR/SAVEFILE $WORKDIR/OPEN_FILE
	fi
	;;
-execute)
	FILE="`echo "$*" | sed -e 's/-execute //g'`"
	case $FILE in *.iso*|*.ISO*) exit;; esac #avoid mounting of iso
	#who's gonna handle MIME
	if which rox > /dev/null 2>&1; then export FILEMANAGER=rox
		elif which pcmanfm; then export FILEMANAGER=pcmanfm
		elif which nautilus; then export FILEMANAGER=nautilus
		elif which xfe; then export FILEMANAGER=xfe
		elif which thunar; then export FILEMANAGER=thunar
		elif which dolphin; then export FILEMANAGER=dolphin
		elif which konqueror; then export FILEMANAGER=konqueror
		elif which emelfm; then export FILEMANAGER=emelfm
	fi
	#open with MIME-type settings
	$FILEMANAGER "$FILE"
	;;
-eject)
	umount $HOME/.pburn/mnt > /dev/null 2>&1
	eject $BURNDEV &
	;;
-load_tray)
	$CDRECORD -load dev=$BURNDEV &
	;;
-check_media)
	#read disc
	# cdrecord -toc must be run before dvd-mediainfo to ensure spin-up of disc
	$CDRECORD dev=$BURNDEV -toc > $WORKDIR/tmp 2>&1 #if disc is damaged, this might take tooooo long time
	export CDINFO="`cat $WORKDIR/tmp`"
	export DVDINFO="`dvd+rw-mediainfo $BURNDEV 2>&1`"
	export MEDIATYPE_FULL='' #some detections offers more detailed info used in the disc info window. For info ONLY.
	#check if disc in tray
	case $CDINFO in *Cannot\ load\ media*|*No\ disk*)
		if [ ! "$BURN" ]; then #updating sizebar in main gui
			DVDINFO=none
		else
			echo 100 > $WORKDIR/splash
			TXT1="<b>$LOC304</b>"
			TXT2="$LOC261: $BURNDEV"
			. $APPDIR/box
			exit
		fi
		;;
	esac
	#check if CD or DVD
	case $DVDINFO in
	*non\-DVD*|*not\ a\ DVD\ unit*) #CD
		export MEDIATYPE=CD
		if [ "`cddetect | grep 'cdtype: audio'`" ]; then
			export MEDIATYPE="$LOC122"
			export MEDIASIZE_FREE="$LOC511"
		fi
		type vcdimager > /dev/null 2>&1 && MEDIATYPE_VIDEO=VCD
		[ "`echo "$CDINFO" | grep -B 1 'track:lout' | grep 'mode: 1'`" ] && export MEDIASIZE_FREE="$LOC511" #closed disc
		#find size
		ATIP="`$CDRECORD dev=$BURNDEV -atip`"
		TMP="`echo "$ATIP" | grep 'lead out:' | cut -d: -f2 | cut -d' ' -f2`"
		[ "$TMP" ] && export MEDIASIZE=$(($TMP*2048))
		#free space
		case $CDINFO in *Cannot\ read\ TOC*|*-1:59:74*) export MEDIASIZE_FREE=$MEDIASIZE;; esac #blank disc
		if [ ! "$MEDIASIZE_FREE" ]; then #not closed
			TMP="`echo "$CDINFO" | grep 'track:lout' | cut -d'(' -f1 | cut -d: -f3 | tr -d ' '`"
			MEDIASIZE_USED="$(($TMP*2048))"
			export MEDIASIZE_FREE=$(($MEDIASIZE-$MEDIASIZE_USED))
		fi
		;;
	none)
		export MEDIATYPE=none
		export MEDIASIZE=''
		;;
	*)	#DVD/Blu-ray
		export MEDIATYPE=DVD #this is for burning command - not for user information --> see $MEDIATYPE_FULL
		export MEDIATYPE_VIDEO=DVD
		#find size and free space
		if [ ! "$MEDIASIZE" ]; then
			case $DVDINFO in
			*BD\ SPARE\ AREA*Disc\ status*appendable*) #BD-R
				export MEDIATYPE_FULL="Blu-ray (BD-R)"
				export MEDIASIZE="`echo "$DVDINFO" | grep '00h(' | tail -n 1 | cut -d= -f2`"
				TMP="`echo "$DVDINFO" | grep 'Next Writable Address' | cut -d: -f2 | tr -d ' ' | cut -d "*" -f1`"
				MEDIASIZE_USED=$(($TMP*2048))
				export MEDIASIZE_FREE=$(($MEDIASIZE-$MEDIASIZE_USED))
				;;
			*Disc\ status*appendable*) #+-R
				export MEDIATYPE_FULL="DVD-rom (DVD+/-R)"
				export MEDIASIZE="`echo "$DVDINFO" | grep 'Legacy lead-out at' | cut -d= -f2`"
				TMP="`echo "$DVDINFO" | grep 'Next Writable Address' | cut -d: -f2 | tr -d ' ' | cut -d "*" -f1`"
				MEDIASIZE_USED=$(($TMP*2048))
				export MEDIASIZE_FREE=$(($MEDIASIZE-$MEDIASIZE_USED))
				;;
			*00h\(*) #-RW
				export MEDIATYPE_FULL="DVD-rom (DVD-RW)"
				export MEDIASIZE="`echo "$DVDINFO" | grep '00h(' | tail -n 1 | cut -d= -f2`"
				export MEDIASIZE_FREE="`echo "$DVDINFO" | grep '13h(' | cut -d= -f2`"
				[ ! "$MEDIASIZE_FREE" ] && MEDIASIZE_FREE=$MEDIASIZE #blanked
				;;
			*Disc\ status*blank*) #blank
				export MEDIATYPE_FULL="DVD-rom (blank)"
				TMP="`echo "$DVDINFO" | grep -m 1 'Track Size:' | cut -d: -f2 | tr -d ' ' | cut -d "*" -f1`"
				export MEDIASIZE=$(($TMP*2048))
				export MEDIASIZE_FREE="$MEDIASIZE"
				;;
			*DVD-ROM\ media\ detected*) #DVD-rom --> not writable
				export MEDIATYPE_FULL="DVD-rom (closed)"
				export MEDIATYPE=DVD-rom
				export MEDIASIZE=''
				;;
			*) #+RW --- #dvd+rw-mediainfo doesn't find free space for DVD+RW
				export MEDIATYPE_FULL="DVD-rom (DVD+RW)"
				export MEDIASIZE="`echo "$DVDINFO" | grep '26h(' | cut -d= -f2`"
				mount -t auto $BURNDEV $HOME/.pburn/mnt/ > /dev/null 2>&1
				MEDIASIZE_USED=`du -sbLx $HOME/.pburn/mnt/ | awk '{print $1}'`
				umount $HOME/.pburn/mnt/
				export MEDIASIZE_FREE=$(($MEDIASIZE-$MEDIASIZE_USED))
				;;
			esac
		fi
		;;
	esac
	[ $MEDIASIZE -gt 10000000000 ] && MEDIATYPE=Blu-ray #blu-rays are handled and deteced as DVDs. it is reset to DVD in func_build_command
	#Progressbar in main gui needs these files. See -update_sizebar)
	echo $MEDIATYPE > $WORKDIR/MEDIATYPE
	echo $MEDIASIZE > $WORKDIR/MEDIASIZE
	echo $MEDIASIZE_FREE > $WORKDIR/MEDIASIZE_FREE
	;;
-find_devices)
	#Find CD / DVD drives. Code taken from Probedisk and Bck2CD.sh.
	echo -n > $WORKDIR/tmp
	ALL_DEV="`ls -1 /sys/block 2> /dev/null | grep -E '^scd|^sr' | tr '\n' ' '``ls -1 /proc/ide 2> /dev/null | grep '^hd' | tr '\n' ' '`"
	for I in $ALL_DEV; do
		case $I in
			hd*) #ide device, look in /proc/ide for info
				MEDIA=($(<"/proc/ide/$I/media"))
				INFO=($(<"/proc/ide/$I/model"))
				;;
			scd*|sr*) #scsi cdroms
				MEDIA="cdrom"
				VENDOR=($(<"/sys/block/$I/device/vendor"))
				MODEL=($(<"/sys/block/$I/device/model"))
				INFO="$VENDOR$MODEL"
				;;
		esac
		echo "/dev/$I|$MEDIA|$INFO" >> $WORKDIR/tmp
	done
	export CD_DRIVES="`grep -Fi cd $WORKDIR/tmp | cut -f 1,3 -d "|" | tr " " "_" | tr "|" " " | tr '$' "_"`"
	#make items for <tree>
	echo -n > $WORKDIR/tmp
	for I in `echo "$CD_DRIVES" | tr " " "|"`; do
		echo "<item stock=\"gtk-cdrom\">""$I""</item>" >> $WORKDIR/tmp
	done
	export ITEMS_DEVICES=$(<"$WORKDIR/tmp")
	;;
-install)
	#check if helpfile is new/updated
	HELPFILE_CHKSUM_NEW="`md5sum /usr/share/doc/pburn/$LANGUAGE.html 2> /dev/null | awk '{print $1}'`"
	[ "$HELPFILE_CHKSUM" = "$HELPFILE_CHKSUM_NEW" ] && exit #nothing new
	#---
	grep -F -A 500 '{3.1}' /usr/share/doc/pburn/en_US:english.html | grep -F -B 500 '{3.2}' | grep -v '{3.1}' | grep -v '{3.2}' | sed -e 's/<br>//g' -e 's/< /<b>/g' -e 's/ >/<\/b>/g' | tr '\n' '|' > $WORKDIR/hlp31
	grep -F -A 500 '{3.2}' /usr/share/doc/pburn/en_US:english.html | grep -F -B 500 '{3.3}' | grep -v '{3.2}' | grep -v '{3.3}' | sed -e 's/<br>//g' -e 's/< /<b>/g' -e 's/ >/<\/b>/g' | tr '\n' '|' > $WORKDIR/hlp32
	grep -F -A 500 '{3.3}' /usr/share/doc/pburn/en_US:english.html | grep -F -B 500 '{3.4}' | grep -v '{3.3}' | grep -v '{3.4}' | sed -e 's/<br>//g' -e 's/< /<b>/g' -e 's/ >/<\/b>/g' | tr '\n' '|' > $WORKDIR/hlp33
	grep -F -A 500 '{3.4}' /usr/share/doc/pburn/en_US:english.html | grep -F -B 500 '{3.5}' | grep -v '{3.4}' | grep -v '{3.5}' | sed -e 's/<br>//g' -e 's/< /<b>/g' -e 's/ >/<\/b>/g' | tr '\n' '|' > $WORKDIR/hlp34
	grep -F -A 500 '{3.5}' /usr/share/doc/pburn/en_US:english.html | grep -F -B 500 '{3.6}' | grep -v '{3.5}' | grep -v '{3.6}' | sed -e 's/<br>//g' -e 's/< /<b>/g' -e 's/ >/<\/b>/g' | tr '\n' '|' > $WORKDIR/hlp35
	grep -F -A 500 '{3.6}' /usr/share/doc/pburn/en_US:english.html | grep -F -B 500 '{3.7}' | grep -v '{3.6}' | grep -v '{3.7}' | sed -e 's/<br>//g' -e 's/< /<b>/g' -e 's/ >/<\/b>/g' | tr '\n' '|' > $WORKDIR/hlp36
	grep -F -A 500 '{3.7}' /usr/share/doc/pburn/en_US:english.html | grep -F -B 500 '{3.8}' | grep -v '{3.7}' | grep -v '{3.8}' | sed -e 's/<br>//g' -e 's/< /<b>/g' -e 's/ >/<\/b>/g' | tr '\n' '|' > $WORKDIR/hlp37
	grep -F -A 500 '{3.8}' /usr/share/doc/pburn/en_US:english.html | grep -F -B 500 '{3.9}' | grep -v '{3.8}' | grep -v '{3.9}' | sed -e 's/<br>//g' -e 's/< /<b>/g' -e 's/ >/<\/b>/g' | tr '\n' '|' > $WORKDIR/hlp38
	grep -F -A 500 '{3.9}' /usr/share/doc/pburn/en_US:english.html | grep -F -B 500 '{3.10}' | grep -v '{3.9}' | grep -v '{3.10}' | sed -e 's/<br>//g' -e 's/< /<b>/g' -e 's/ >/<\/b>/g' | tr '\n' '|' > $WORKDIR/hlp39
	grep -F -A 500 '{3.10}' /usr/share/doc/pburn/en_US:english.html | grep -F -B 500 '{3.11}' | grep -v '{3.10}' | grep -v '{3.11}' | sed -e 's/<br>//g' -e 's/< /<b>/g' -e 's/ >/<\/b>/g' | tr '\n' '|' > $WORKDIR/hlp310
	grep -F -A 500 '{3.11}' /usr/share/doc/pburn/en_US:english.html | grep -F -B 500 '{4}' | grep -v '{3.11}' | grep -v '{3.2}' | sed -e 's/<br>//g' -e 's/< /<b>/g' -e 's/ >/<\/b>/g' | tr '\n' '|' > $WORKDIR/hlp311
	grep -F -A 500 '{4}' /usr/share/doc/pburn/en_US:english.html | grep -v '{4}' | sed -e 's/<br>//g' -e 's/< /<b>/g' -e 's/ >/<\/b>/g' > $WORKDIR/hlp4
	#Write config
	echo 'export HLPTXT31="'`cat "$WORKDIR/hlp31"`'"' | tr '|' '\n' > $HOME/.pburn/pburnhlp-$LANGUAGE
	echo 'export HLPTXT32="'`cat "$WORKDIR/hlp32"`'"' | tr '|' '\n' >> $HOME/.pburn/pburnhlp-$LANGUAGE
	echo 'export HLPTXT33="'`cat "$WORKDIR/hlp33"`'"' | tr '|' '\n' >> $HOME/.pburn/pburnhlp-$LANGUAGE
	echo 'export HLPTXT34="'`cat "$WORKDIR/hlp34"`'"' | tr '|' '\n' >> $HOME/.pburn/pburnhlp-$LANGUAGE
	echo 'export HLPTXT35="'`cat "$WORKDIR/hlp35"`'"' | tr '|' '\n' >> $HOME/.pburn/pburnhlp-$LANGUAGE
	echo 'export HLPTXT36="'`cat "$WORKDIR/hlp36"`'"' | tr '|' '\n' >> $HOME/.pburn/pburnhlp-$LANGUAGE
	echo 'export HLPTXT37="'`cat "$WORKDIR/hlp37"`'"' | tr '|' '\n' >> $HOME/.pburn/pburnhlp-$LANGUAGE
	echo 'export HLPTXT38="'`cat "$WORKDIR/hlp38"`'"' | tr '|' '\n' >> $HOME/.pburn/pburnhlp-$LANGUAGE
	echo 'export HLPTXT39="'`cat "$WORKDIR/hlp39"`'"' | tr '|' '\n' >> $HOME/.pburn/pburnhlp-$LANGUAGE
	echo 'export HLPTXT310="'`cat "$WORKDIR/hlp310"`'"' | tr '|' '\n' >> $HOME/.pburn/pburnhlp-$LANGUAGE
	echo 'export HLPTXT311="'`cat "$WORKDIR/hlp311"`'"' | tr '|' '\n' >> $HOME/.pburn/pburnhlp-$LANGUAGE
	echo 'export HLPTXT4="'`cat "$WORKDIR/hlp4"`'"' | tr '|' '\n' >> $HOME/.pburn/pburnhlp-$LANGUAGE
	chmod 700 $HOME/.pburn/pburnhlp-$LANGUAGE
	#write new checksum in rc file
	HELPFILE_CHKSUM="$HELPFILE_CHKSUM_NEW"
	. $APPDIR/func -write_config
	;;
-available_size)
	[ "$OUTDIR" ] && echo "$OUTDIR" > $WORKDIR/OUTDIR
	#$OUTDIR can't be located inside ../pburn_symlink_tree/
	if [ `echo "$OUTDIR" | grep pburn_symlink_tree` ]; then 
		TXT1="$LOC343"
		. $APPDIR/box
		exit
	fi
	#find available space on filesystem with $TMPDIR
	TMPOUTDIR=`cat $WORKDIR/OUTDIR`
	[ -L "$TMPOUTDIR" ] && TMPOUTDIR=`readlink "$TMPOUTDIR"` #if symlink, point to actual dir	
	FILESYSTEM=`df -m "$TMPOUTDIR" 2> /dev/null | grep ^/dev`
	if [ "$FILESYSTEM" == "" ]; then
		FREE_SIZE=` df -m | grep ' /$' | tr -s " " | cut -f 4 -d ' '`
	else
		FREE_SIZE=`echo $FILESYSTEM | tr -s " " | cut -f 4 -d ' '`
	fi
	echo -e "$LOC239: $FREE_SIZE Mb $LOC242\c" > $WORKDIR/systemsize
	;;
-config)
	. $CONFIG
	echo "$OUTDIR" > $WORKDIR/OUTDIR
	if [ -s $CONFIG_SEARCH ]; then . $CONFIG_SEARCH; fi #read Pfilesearch config
	VISIBLE_ISO=enabled #disabled when burning ISO
	. $APPDIR/func_gui_options #read gtkdialog code for option-tabs
	export LANGUAGES=`ls $APPDIR/locals | awk '{print "<item>"$1"</item>"}'` #for configure
	export THEMES=`ls $APPDIR/themes | awk '{print "<item>"$1"</item>"}'` #for configure
	
	#theme-picture
	[ -f $APPDIR/themes/$THEME/heading-preferences.png ] && PIC="<pixmap><input file>$APPDIR/themes/$THEME/heading-preferences.png</input></pixmap>"
	export Pburn_config="
<window title=\"Pburn\" icon-name=\"gtk-cdrom\">
 <vbox space-expand=\"true\" space-fill=\"true\">
  $PIC
  <notebook labels=\"$LOC229|$LOC120|$LOC249|$LOC260|$LOC122|$LOC129|$LOC274\">
   <vbox>
    <frame $LOC229>
     <checkbox label=\"$LOC227\">
      <variable>SHOW_HIDDEN</variable>
      <default>$SHOW_HIDDEN</default>
     </checkbox>
     <checkbox>
      <label>$LOC231</label>
      <variable>SHOW_TOOLTIPS</variable>
      <default>$SHOW_TOOLTIPS</default>
     </checkbox>
     <hbox>
      <text><label>$LOC232</label></text>
      <combobox>
       <variable>NEW_LANGUAGE</variable>
       <item>$LANGUAGE</item>
       <item>auto</item>
       $LANGUAGES
      </combobox>
      <button label=\"www\"><action>$BROWSER http:\/\/www.murga-linux.com/puppy/viewtopic.php?p=164887 &</action></button>
     </hbox>
     <hbox>
      <text><label>$LOC233</label></text>
      <combobox>
       <variable>THEME</variable>
       <item>$THEME</item>
       <item>No theme</item>
       $THEMES
      </combobox>
      <button label=\"www\"><action>$BROWSER http:\/\/www.murga-linux.com/puppy/viewtopic.php?p=205908#205908 &</action></button>
     </hbox>
     <hbox>
      <text><label>$LOC600</label></text>
      <entry accept=\"file\"><variable>SOUND_FINISH</variable><input>echo $SOUND_FINISH</input></entry>
      <button>
       <input file stock=\"gtk-open\"></input>
       <action type=\"fileselect\">SOUND_FINISH</action>
      </button>
     </hbox>
     <hbox>
      <text><label>$LOC601</label></text>
      <entry accept=\"file\"><variable>SOUND_ERROR</variable><input>echo $SOUND_ERROR</input></entry>
      <button>
       <input file stock=\"gtk-open\"></input>
       <action type=\"fileselect\">SOUND_ERROR</action>
      </button>
     </hbox>
    </frame>
    <frame $LOC117>
     <hbox>
      <button><label>$LOC228</label><input file stock=\"gtk-find\"></input><action>. pfilesearch -p</action></button>
     </hbox>
     <hbox>
      <text><label>$LOC234</label></text>
      <entry>
       <variable>SEARCHPATH</variable>
       <default>$SEARCHPATH</default>
      </entry>
     </hbox>
    </frame>
    <hbox>
     <text use-markup=\"true\"><label>\"<b>$LOC_INFO</b>\"</label></text>
     <button>
      <input file stock=\"gtk-info\"></input>
      <action>FRAME=$LOC_INFO; IMG=dialog-info; TXT1=\$HLPTXT31; . $APPDIR/box &</action>
     </button>
    </hbox>
   </vbox>
   $GUI_BURN
   $GUI_FILESYSTEM
   $GUI_DEVICES
   $GUI_AUDIO
   $GUI_VIDEO
   $GUI_PUBLISH
  </notebook>
  <hbox space-expand=\"false\" space-fill=\"false\">
   $GUI_TEMPORARY_STORAGE
   <hbox width-request=\"340\">
   <button tooltip-text=\"$LOC_CANCEL\" height-request=\"50\" width-request=\"50\">
    <input file stock=\"gtk-cancel\"></input>
    <action type=\"exit\">cancel</action>
   </button>
   <button tooltip-text=\"$LOC103\" height-request=\"50\" width-request=\"50\">
    <input file stock=\"gtk-apply\"></input>
    <action type=\"exit\">OK</action>
   </button>
   </hbox>
  </hbox>
 </vbox>
</window>"
	I=$IFS; IFS=""
	for STATEMENTS in $($GTKDIALOG -p Pburn_config); do
		eval $STATEMENTS
	done
	IFS=$I
	if [ "$EXIT" = "OK" ]; then
		if [ ! $LANGUAGE = $NEW_LANGUAGE ]; then
			LANGUAGE="$NEW_LANGUAGE"
			$APPDIR/func -install
			FRAME="$LOC_INFO"; IMG="dialog-info"; TXT1="Restart Pburn to activate new language."
			. $APPDIR/box
		fi
		. $APPDIR/func -write_config
		. $CONFIG
		. $CONFIG_SEARCH
		echo "$SHOW_HIDDEN" > $WORKDIR/SHOW_HIDDEN
		. $APPDIR/func -available_size
		. $APPDIR/func_gui_options
	fi
	;;
-write_config)
	echo "#Pburn config"							 > $CONFIG
	echo "export VERSION=$VERSION"					>> $CONFIG
	echo "export SKIP_STARTUP_CHECK=$SKIP_STARTUP_CHECK" >> $CONFIG
	echo "export LANGUAGE=$LANGUAGE"				>> $CONFIG
	echo "export HELPFILE_CHKSUM=$HELPFILE_CHKSUM"	>> $CONFIG #Used to check for NLS-updates
	echo "export THEME=\"$THEME\""					>> $CONFIG
	echo "export SOUND_FINISH=\"$SOUND_FINISH\""	>> $CONFIG
	echo "export SOUND_ERROR=\"$SOUND_ERROR\""		>> $CONFIG
	echo "export SEARCHPATH=\"$SEARCHPATH\""		>> $CONFIG
	echo "export OUTDIR=\"$OUTDIR\""				>> $CONFIG #where iso-file is built
	echo "export SHOW_HIDDEN=$SHOW_HIDDEN"			>> $CONFIG
	echo "export SHOW_TOOLTIPS=$SHOW_TOOLTIPS"		>> $CONFIG
	echo "export MEDIATYPE=$MEDIATYPE"				>> $CONFIG
#	echo "export CHK_OVERBURN=$CHK_OVERBURN"		>> $CONFIG #not good for compatibility. Overburn forces dao which is not good for multisession
	echo "export ON_THE_FLY=$ON_THE_FLY"			>> $CONFIG
	echo "export BURNDEV=$BURNDEV"					>> $CONFIG
	echo "export ISOLEVEL3=$ISOLEVEL3"				>> $CONFIG
	echo "export ISOLEVEL1=$ISOLEVEL1"				>> $CONFIG
	echo "export ROCKRIDGE=$ROCKRIDGE"				>> $CONFIG
	echo "export JOLIET=$JOLIET"					>> $CONFIG
	echo "export UDF=$UDF"						 	>> $CONFIG
	echo "export FOLLOW_SYMLINK=$FOLLOW_SYMLINK" 	>> $CONFIG
	echo "export BURNMULTI=$BURNMULTI" 				>> $CONFIG
	echo "export CDSPEED=$CDSPEED"					>> $CONFIG
	echo "export DVDSPEED=$DVDSPEED"				>> $CONFIG
	echo "export DISC_AT_ONCE=$DISC_AT_ONCE"		>> $CONFIG
	echo "export BURNRAW=$BURNRAW"					>> $CONFIG
	echo "export NORMALIZE=$NORMALIZE"				>> $CONFIG
	echo "export MEDIATYPE_VIDEO=$MEDIATYPE_VIDEO" 	>> $CONFIG
	echo "export PAL=$PAL"							>> $CONFIG
	echo "export NTSC=$NTSC"						>> $CONFIG
	echo "export ASPECT43=$ASPECT43"				>> $CONFIG
	echo "export ASPECT169=$ASPECT169"				>> $CONFIG
	echo "export PIC_VIEWTIME=$PIC_VIEWTIME"		>> $CONFIG
	echo "export PAUSE_VIDEO=$PAUSE_VIDEO"			>> $CONFIG
	echo "export PUBLISHER=\"$PUBLISHER\""			>> $CONFIG
	echo "export PREPARER=\"$PREPARER\""			>> $CONFIG
	echo "export VOLUME=\"$VOLUME\""				>> $CONFIG
	echo "export CPU_PRIORITY=$CPU_PRIORITY"		>> $CONFIG
	sed -i -e "s/\/\//\//g" $CONFIG #in case //
	;;
-about)
	export Pburn_about="
<window title=\"Pburn - about\" icon-name=\"gtk-cdrom\">
 <notebook labels=\"About|License|Credits\">
  <frame>
   <text><label>\"\"</label></text>
   $SPLASH
   <text use-markup=\"true\"><label>\"<b><span size='"'x-large'"'>P</span><span size='"'x-large'"' color='"'#B6661F'"'>burn</span> $VERSION</b>\"</label></text>
   <text use-markup=\"true\"><label>Sigmund Berglund, Copyright 2007-2012</label></text>
   <text><label>\"\"</label></text>
   <button>
    <label>\"http://www.murga-linux.com/puppy/viewtopic.php?t=23881\"</label>
    <action>$BROWSER http:\/\/www.murga-linux.com/puppy/viewtopic.php?t=23881 &</action>
   </button>
  </frame>
  <frame>
   <text use-markup=\"true\"><label>\"Pburn is released under the <b>GNU General Public License</b> (GPL). You have the right to use and modify this software in any way you like, so long as any derivative works remain under a GPL license.\"</label></text>
   <text use-markup=\"true\"><label>\"This program is distributed in the hope that it will be useful, but <b><span color='"'red'"'>WITHOUT ANY WARRANTY</span></b>. See the GNU General Public License homepage for more details.\"</label></text>
   <hbox>
    <button label=\"http://www.gnu.org/licenses/\"><action>$BROWSER http:\/\/www.gnu.org\/licenses\/</action></button>
   </hbox>
  </frame>
  <frame>
   <edit><default>\"Translators:
French - Jean-Jacques Moulinier (esmourguit)
German - Thorsten Köbe (aragon), Mark Ulrich (MU)
Greek - (The hamsters)
Italian - Angelo Gemmi
Japanese - Yukihiro MIYASAKA 
Norwegian (bokmål) - Sigmund Berglund (zigbert)
Polish - Robert Wojewódzki (robwoj44)
Russian - Viktor Melechin (melviX), Aleksandr Proklov (Pro), Valeriy Danilin (Valeriy), (DdShurick), (Zloy_T)
Spanish -  Néstor Jiménez (bernard), Pedro Worcel (droope)

Others:
Alister Hood (disciple) for endless input
Omair (Dougal) for bash knowledge
Nathan Fisher for 'Grafburn' code
Mikeb for verify-function and more
Jason Pline (plinej) for 'Pdvdrsab' code
Barry Kauler for 'burniso2CD' code
01micko,MU,JB4x4,HairyWill
ttuxxx,whodo,Pizzasgood...and more
\"</default></edit>
  </frame>
 </notebook>
</window>"
	$GTKDIALOG -p Pburn_about --center
	;;
esac
