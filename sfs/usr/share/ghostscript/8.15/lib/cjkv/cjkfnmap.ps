%!
%
% Developed by AXE,Inc., BBR Inc. and Turbolinux Inc.
%   under the technical advice by suzuki toshiya (Hiroshima University)
% For questions, please send mail to espgs8-cjk@printing-japan.org
%
% (C) Copyright 2006 Center of the International Cooperation for
%     Computerization
%
%
% Based on gs-cjk patches
% Copyright (C) 2001-2003 gs-cjk project:
%   Masatake Yamato, suzuki toshiya, Hideyuki Suzuki and Taiji Yamada.
%   All rights reserved.
%
%
% Based on GNU Ghostscript 7.07 and 8.15
% Copyright (C) 1996-2003 artofcode LLC.  All rights reserved.
%
% This software is provided AS-IS with no warranty, either express or
% implied.
%
%
% This program is free software;  you can redistribute it and/or
% modify it under the terms of the GNU General Public License as
% published by the Free Software Foundation; either version 2 of
% the License, or (at your option) any later version.
%
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
% See the GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with this program; if not, write to the Free Software Foundation,
% Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
%


true setglobal

[
   /CJKV_DEBUG_FNMAP
   /NOCIDFONTMAP
] {dup where {pop pop} { currentdict exch false def pop } ifelse} forall


50 dict begin

/.cjkv_filenamedirseparator (/) def
/_cjkv_defaultcidfontmap (CIDFnmap) def

% -------------------------------------------------------------------------------
% taken from gs7.05/lib/gs_cidfn.ps

% Define the name of the CID font map file.
userdict /_cjkv_CIDFontmap 10 dict put

% <dict> <file> .readCIDFontmap <dict>
% Code from gs_fonts.ps::.readFontmap
  /.cjkv_readCIDFontmap {
    CJKV_DEBUG_FNMAP { (.cjkv_readCIDFontmap\n) print flush } if
    { dup token not { closefile exit } if
      dup (\032) eq { pop closefile exit } if
      1 index token not
       { (CIDFontmap entry for ) print dup =only
         ( has no associated file or alias name!  Giving up.) = flush
         {.cjkv_readCIDFontmap} 0 get 1 .quit
       } if
      dup type dup /stringtype eq exch /nametype eq or not
       { (CIDFontmap entry for ) print 1 index =only
         ( has an invalid file or alias name!  Giving up.) = flush
         {.cjkv_readCIDFontmap} 0 get 1 .quit
       } if
                % stack: dict file cidfontname filename|aliasname
      1 index type /stringtype eq
      1 index type /nametype eq and 1 index xcheck and
      1 index /run eq 2 index /.runlibfile eq or and {
                % This is an inclusion entry.
        pop findlibfile { exch pop } { file } ifelse
        2 index exch .cjkv_readCIDFontmap pop
      } {
        exch dup type /stringtype eq {cvn} if exch
       { 2 index token not
          { (CIDFontmap entry for ) print 1 index =only
            ( ends prematurely!  Giving up.) = flush
            {.cjkv_readCIDFontmap} 0 get 1 .quit
          } if
         dup /; eq { pop 3 index 3 1 roll .growput exit } if
         1 index type /nametype eq {
           (CIDFontmap entry for ) print 2 index =only
           (defines an alias! Giving up.) = flush
           {.cjkv_readCIDFontmap} 0 get 1 .quit
         } if
         exch [ exch 3 -1 roll
         dup type /integertype eq {
           4 index token not
           { (CIDFontmap entry for ) print 3 index =only
             ( ends prematurely!  Giving up.) = flush
             {.cjkv_readCIDFontmap} 0 get 1 .quit
           } if
         } if
         dup /; eq not 1 index type /nametype eq and {
           counttomark 2 eq {4} {5} ifelse index token not
           { (CIDFontmap entry for ) print
             counttomark 2 eq {3} {4} ifelse index =only
             ( ends prematurely!  Giving up.) = flush
             {.cjkv_readCIDFontmap} 0 get 1 .quit
           } if
         } if
         dup /; eq {
             pop ]
             3 index 3 1 roll .growput exit
         } if
         pop
       } loop
      } ifelse
    } loop
  } bind def

% <file> .cjkv_loadCIDFontmap -
  /.cjkv_loadCIDFontmap {
    CJKV_DEBUG_FNMAP { (.cjkv_loadCIDFontmap\n) print flush } if
    userdict /_cjkv_CIDFontmap get exch
    .cjkv_readCIDFontmap pop
  } bind def

% Code from .loadinitialfonts
  /.cjkv_loadinitialcidfonts {
    CJKV_DEBUG_FNMAP { (.cjkv_loadinitialcidfonts\n) print flush } if
    NOCIDFONTMAP not {
      /CIDFONTMAP where {
        pop [ CIDFONTMAP .pathlist ] {
          dup VMDEBUG findlibfile {
            exch pop .cjkv_loadCIDFontmap
          } {
            /undefinedfilename signalerror
          } ifelse
        } forall
      } {
        LIBPATH {
          _cjkv_defaultcidfontmap 2 copy .cjkv_filenamedirseparator
          exch concatstrings concatstrings
          3 1 roll pop pop dup
          CJKV_DEBUG_FNMAP { (lookup CIDFnmap: ) print flush dup =only } if
          VMDEBUG (r) { file } .internalstopped {
            CJKV_DEBUG_FNMAP { ( ... not found\n) print flush } if
            pop pop
          } {
            CJKV_DEBUG_FNMAP { ( ... found\n) print flush } if
            .cjkv_loadCIDFontmap
          } ifelse
        } forall
      } ifelse
    } if
 } bind def

 .cjkv_loadinitialcidfonts

  /_cjkv_CIDFontmapHandler <<
    /nametype {
      CJKV_DEBUG_FNMAP { (*** exec _cjkv_CIDFontmapHandler for nametype: ) print dup == flush } if
      /CIDFont findresource
      /CIDFont defineresource pop
    } bind
    /stringtype {
      CJKV_DEBUG_FNMAP { (*** exec _cjkv_CIDFontmapHandler for stringtype: \() print dup =only (\)\n) print flush } if
      findlibfile {
        CJKV_DEBUG_FNMAP { (*** exec _cjkv_CIDFontmapHandler found file\n) print } if
        exch pop
        % Define CIDFont with a name defined in the font file
        CJKV_DEBUG_FNMAP { (***      _cjkv_CIDFontmapHandler->.cjkv_loadcidfontwithoutpop\n) print } if


          CJKV_DEBUG_FNMAP { (.cjkv_loadcidfontwithoutpop start\n) print flush } if
          dup 4 string .peekstring pop dup (ttcf) eq exch (\000\001\000\000) eq or {
            .loadcjkvttcidfont
          } {
            /CIDFont /Category findresource /.Instances get
            dup length 2 div cvi dict .copydict exch
            .loadfont
            /CIDFont /Category findresource /.Instances get {
              2 index 2 index known {
                pop pop
              } {
                pop exch pop /CIDFont findresource exit
              } ifelse
            } forall
            dup /CIDFontName known not {
              {Internal Error in .cjkv_loadcidfontwithoutpop} stop
            } if
          } ifelse
          CJKV_DEBUG_FNMAP { (.cjkv_loadcidfontwithoutpop finished\n) print flush } if


        CJKV_DEBUG_FNMAP { (***      _cjkv_CIDFontmapHandler<-.cjkv_loadcidfontwithoutpop\n) print } if
        % Define CIDFont with a name define in CIDFontmap
        dup length 0 ne {
            dup /CIDFontName get 2 index eq {
                CJKV_DEBUG_FNMAP { (*** define CIDFont resource with self name\n) print } if
                % Avoid duplicated defineresource for the same CIDFont
                pop pop
            } {
                CJKV_DEBUG_FNMAP { (*** rename CIDFont resource\n) print flush } if
                % Give a name different from the name defined in the file
                /CIDFont
                CJKV_DEBUG_FNMAP { (*** exec defineresource: ) print 2 index == ( ) print 1 index == ( ) print 0 index == (\n) print flush } if
                defineresource pop
                CJKV_DEBUG_FNMAP { (*** exec defineresource ok\n) print flush } if
            } ifelse
        } {
            CJKV_DEBUG_FNMAP { (*** 0-sized CIDFont dict\n) print } if
            pop pop
        } ifelse
      } {
        CJKV_DEBUG_FNMAP { (*** exec _cjkv_CIDFontmapHandler cannot find file\n) print } if
        /undefinedresource signalerror
      } ifelse
      CJKV_DEBUG_FNMAP { (*** _cjkv_CIDFontmapHandler END\n) print } if
    } bind
    /arraytype {
    % Replace filename in the array with file
        dup 0 get
        findlibfile {
            3 1 roll pop
            copyarray dup 3 1 roll 0
            3 -1 roll put
            % Expand array
            aload pop .loadcjkvttcidfont
            /CIDFont defineresource pop
        } {
            /undefinedresource signalerror
        } ifelse
    } bind
  >> def


  /.cjkv_CIDFontmapKnown {
    CJKV_DEBUG_FNMAP { (*** .cjkv_CIDFontmapKnown: ) print flush dup == } if
    userdict /_cjkv_CIDFontmap get
    CJKV_DEBUG_FNMAP { dup { exch (    key: ) print == (        val: ) print == flush } forall } if
    exch known
  } bind def

  /.cjkv_CIDFontmapKnownget {
    CJKV_DEBUG_FNMAP { (*** .cjkv_CIDFontmapKnownget: ) print flush dup == } if
    userdict /_cjkv_CIDFontmap get exch .knownget
  } bind def

  /.cjkv_CIDFontmapKnowngetBase {
    CJKV_DEBUG_FNMAP { (*** .cjkv_CIDFontmapKnowngetBase: ) print flush dup == } if
    userdict /_cjkv_CIDFontmap get exch { % dict key
      1 index 1 index known {
        CJKV_DEBUG_FNMAP { (*** .cjkv_CIDFontmapKnowngetBase: temp: ) print 1 index == flush } if
        1 index exch get
      } {
        CJKV_DEBUG_FNMAP { (*** .cjkv_CIDFontmapKnowngetBase: base: ) print 1 index == flush } if
        exit
      } ifelse
    } loop
    exch pop
    CJKV_DEBUG_FNMAP { (*** .cjkv_CIDFontmapKnowngetBase: exit with ) print dup == flush } if
  } bind def

  /.cjkv_CIDFontmapRunHandler {
    CJKV_DEBUG_FNMAP { (*** .cjkv_CIDFontmapRunHandler START\n) print flush } if
    dup
    /CIDFont /Category findresource /_cjkv_CIDFontmapHandler get
    exch type get
    CJKV_DEBUG_FNMAP { (*** .cjkv_CIDFontmapRunHandler EXEC: _cjkv_CIDFontmapHandler:) print dup == flush } if
    .execasresource
    CJKV_DEBUG_FNMAP { (*** .cjkv_CIDFontmapRunHandler END\n) print flush } if
  } bind def

  /.cjkv_CIDFontmapForAll {
    CJKV_DEBUG_FNMAP { (*** .cjkv_CIDFontmapForAll\n) print flush } if
    _cjkv_CIDFontmap exch forall
  } bind def

  /.cjkv_CIDFontmapForAllKey {
    CJKV_DEBUG_FNMAP { (*** .cjkv_CIDFontmapForAllKey\n) print flush } if
    [ /pop cvx 3 -1 roll /exec cvx ] cvx ._cjkv_CIDFontmapForAll
  } bind def
currentdict
end


%
% CIDFont resource handler must be modified
%
languagelevel exch 2 .setlanguagelevel

/CIDFont /Category findresource dup length dict .copydict
copy
  /.originalresourceforall 1 index /ResourceForAll get def

  dup /ResourceForAll {
    currentglobal false setglobal
    [
      4 index {cvn} 4 index .originalresourceforall {
        dup length string cvs dup counttomark 4 add index
        .stringmatch {
          cvn counttomark -1 1 {
            index 1 index eq {
              pop exit % Duplicated
            } if
          } for
        } {
          pop
        } ifelse
      } .cjkv_CIDFontmapForAllKey
    ]
    exch setglobal
    4 -1 roll pop 3 1 roll [
      exch {cvs} aload pop 4 -1 roll aload pop
    ] cvx
    forall
  } put

  /.cjkv_loadcidfontresource {
    CJKV_DEBUG_FNMAP { (.cjkv_loadcidfontresource\n) print flush } if
    dup .ResourceFile {
      {
          CJKV_DEBUG_FNMAP { (.cjkv_loadcidfontwithoutpop start\n) print flush } if
          dup 4 string .peekstring pop dup (ttcf) eq exch (\000\001\000\000) eq or {
            .loadcjkvttcidfont
          } {
            /CIDFont /Category findresource /.Instances get
            dup length 2 div cvi dict .copydict exch
            .loadfont
            /CIDFont /Category findresource /.Instances get {
              2 index 2 index known {
                pop pop
              } {
                pop exch pop /CIDFont findresource exit
              } ifelse
            } forall
            dup /CIDFontName known not {
              {Internal Error in .cjkv_loadcidfontwithoutpop} stop
            } if
          } ifelse
          CJKV_DEBUG_FNMAP { (.cjkv_loadcidfontwithoutpop finished\n) print flush } if
          pop

      } .execasresource
    } {
      pop dup .cjkv_CIDFontmapKnownget {
        .cjkv_CIDFontmapRunHandler
      } {
        dup /undefinedresource signalerror
      } ifelse
    } ifelse
  } bind def

  dup /.LoadResource {
    CJKV_DEBUG_FNMAP { (.LoadResource\n) print flush } if
    currentglobal {
      .cjkv_loadcidfontresource
    } {
      true setglobal {.cjkv_loadcidfontresource} stopped false setglobal {stop} if
    } ifelse
  } bind put

  dup /.ResourceFileStatus {
    CJKV_DEBUG_FNMAP { (*** cjkv_modified .ResourceFileStatus for CIDFont\n) print flush } if
    dup .cjkv_CIDFontmapKnown {
      CJKV_DEBUG_FNMAP { (    ResourceFileStatus returns TRUE\n) print flush } if
      pop 2 -1 true
    } {
      .ResourceFile {
        CJKV_DEBUG_FNMAP { (    ResourceFileStatus returns TRUE\n) print flush } if
        closefile 2 -1 true
      } {
        CJKV_DEBUG_FNMAP { (    ResourceFileStatus returns FALSE\n) print flush } if
        pop false
      } ifelse
    } ifelse
  } bind put

  dup /.CIDFontmapKnown        { .cjkv_CIDFontmapKnown        } bind put
  dup /.CIDFontmapKnownget     { .cjkv_CIDFontmapKnownget     } bind put
  dup /.CIDFontmapKnowngetBase { .cjkv_CIDFontmapKnowngetBase } bind put
  dup /.CIDFontmapRunHandler   { .cjkv_CIDFontmapRunHandler   } bind put
  dup /.CIDFontmapForAll       { .cjkv_CIDFontmapForAll       } bind put
  dup /.CIDFontmapForAllKey    { .cjkv_CIDFontmapForAllKey    } bind put

/CIDFont exch /Category defineresource pop

.setlanguagelevel
