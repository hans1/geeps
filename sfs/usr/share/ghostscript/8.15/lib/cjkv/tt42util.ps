%!
%
% Developed by AXE,Inc., BBR Inc. and Turbolinux Inc.
%   under the technical advice by suzuki toshiya (Hiroshima University)
% For questions, please send mail to espgs8-cjk@printing-japan.org
%
% (C) Copyright 2006 Center of the International Cooperation for
%     Computerization
%
%
% Based on gs-cjk patches
% Copyright (C) 2001-2003 gs-cjk project:
%   Taiji Yamada, Hideyuki Suzuki, Masatake Yamato and suzuki toshiya.
%   Enhancements by Akira Tagoh and Taiji Yamada, 2005.
%   All rights reserved.
%
%
% Based on GNU Ghostscript 7.07 and 8.15
% Copyright (C) 1996-2003 artofcode LLC.  All rights reserved.
%
% This software is provided AS-IS with no warranty, either express or
% implied.
%
%
% This program is free software;  you can redistribute it and/or
% modify it under the terms of the GNU General Public License as
% published by the Free Software Foundation; either version 2 of
% the License, or (at your option) any later version.
%
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
% See the GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with this program; if not, write to the Free Software Foundation,
% Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
%


[
   /CJKV_DEBUG_TT42
] {dup where {pop pop} { currentdict exch false def pop } ifelse} forall

/_cjkv_type42_tmp 10 dict def

/_cjkv_type42_util 15 dict dup begin

  % <tab> .cjkv_printtab -
  /.cjkv_printtab {
    CJKV_DEBUG_TT42 { (.cjkv_printtab\n) print flush } if
    dup 0 4 getinterval print ( ) print
    dup 8 .cjkv_getu32 =only ( ) print
    12 .cjkv_getu32 =
  } bind def
  
  % <file> .cjkv_loadttfonttables -
  % <file> <fontindex> .cjkv_loadttfonttables - % extention by hideyuki
  % Pushes .cjkv_loadttfontdict & scratch dict on d-stack.
  % Defines f, offsets, tables, tabdict, tabs.
  /.cjkv_loadttfonttables {
    CJKV_DEBUG_TT42 { (*** .cjkv_loadttfonttables start\n) print flush } if
    _cjkv_base_util begin
    40 dict begin
    dup type /integertype eq % extention by hideyuki
    { 1 sub } { 0 } ifelse /findex exch def
    /f exch def
    /offsets f 12 string readstring pop def
  
    CJKV_DEBUG_TT42 { (*** .cjkv_loadttfonttables init #1 is ok\n) print flush } if
    % TrueType Collection File support
    % Jan 11 2000: Hideyuki Suzuki <hideyuki@sat.t.u-tokyo.ac.jp>
    % Feb 10 2001: suzuki toshiya <mpsuzuki@hiroshima-u.ac.jp>
    offsets 0 4 getinterval (ttcf) eq {
      [ 1 1 offsets 8 .cjkv_getu32 { pop f 4 string readstring pop 0 .cjkv_getu32} for ]
      dup findex get dup /ttcheader exch def exch length 4 mul 12 add sub
      %dup 0 gt { string f exch readstring pop } if pop
      f fileposition add f exch setfileposition
      % the previous line is for very large ttcf, hacked by suzuki toshiya
      /offsets f 12 string readstring pop def
    } { /ttcheader 0 def } ifelse
    CJKV_DEBUG_TT42 { (*** .cjkv_loadttfonttables init #2 is ok\n) print flush } if
  
    /tables f offsets 4 .cjkv_getu16 16 mul string readstring pop def
    CJKV_DEBUG_TT42 { (*** .cjkv_loadttfonttables tables def ok\n) print flush } if
    /tabdict tables length 16 idiv dict def
    CJKV_DEBUG_TT42 { (*** .cjkv_loadttfonttables tabdict def ok\n) print flush } if
  	% tabs = tables we want to keep, sorted by file position.
    /tabs [ 0 16 tables length 1 sub {
      tables exch 16 getinterval
      CJKV_DEBUG_TT42 { dup _cjkv_type42_util /.cjkv_printtab get exec } if
      dup 0 4 getinterval _cjkv_readtables 1 index known {
        tabdict exch 2 index put
      } {
        pop pop
      } ifelse
    } for ] {
      exch 8 .cjkv_getu32 exch 8 .cjkv_getu32 lt
    } .cjkv_sort def
  	% In certain malformed TrueType fonts, tables overlap.
  	% Truncate tables if necessary.
    0 1 tabs length 2 sub {
      dup tabs exch get exch 1 add tabs exch get
      1 index 8 .cjkv_getu32 2 index 12 .cjkv_getu32 add
      1 index 8 .cjkv_getu32 gt {
        (**** Warning: ) print 1 index 0 4 getinterval print
        ( overlaps ) print dup 0 4 getinterval print
        (, truncating.) = flush
        dup 8 .cjkv_getu32 2 index 8 .cjkv_getu32 sub
        2 index 12 3 -1 roll .cjkv_putu32
      } if pop pop
    } for
    CJKV_DEBUG_TT42 { (*** .cjkv_loadttfonttables finished \n) print flush } if
  } bind def
  
  % - .cjkv_readttdata -
  % Read data.  Updates offsets, tabs; stores data in tabdict.
  /.cjkv_readttdata {
    CJKV_DEBUG_TT42 { (.cjkv_readttdata\n) print flush } if
  
    % TrueType Collection File support
    % Jan 11 2000: Hideyuki Suzuki <hideyuki@sat.t.u-tokyo.ac.jp>
    % /fpos offsets length tables length add def
    /fpos ttcheader offsets length tables length add add def
    /sfpos offsets length tabs length 16 mul add def
    offsets 4 tabs length .cjkv_putu16
    tabs {
      dup 0 4 getinterval /tname exch def
      dup 8 .cjkv_getu32 /tpos exch def
      dup 12 .cjkv_getu32 /tlen exch def
      8 sfpos .cjkv_putu32
  	% Skip data between the end of the previous table and
  	% the beginning of this one, if any.
      tpos fpos gt {
        f tpos fpos sub () /SubFileDecode filter dup flushfile closefile
        /fpos tpos def
      } if
      f tlen _cjkv_readtables tname get exec
      tabdict tname 3 -1 roll put
      /fpos fpos tlen add def
  	% Round up the table length to an even value.
      /sfpos sfpos tlen dup 1 and add add def
    } forall
  } bind def
  
  % Find the string in a list of strings that includes a given index.
  % <strings> <index> .findseg <string> <index'>
  /.cjkv_findseg {
    CJKV_DEBUG_TT42 { (.cjkv_findseg\n) print flush } if
    exch {
      dup length 2 index gt { exch exit } if
      length sub
    } forall
  } bind def
  
  % - .cjkv_makesfnts -
  % Defines checksum, getloca, head, locatable, numloca, post, sfnts, upem
  /.cjkv_makesfnts {
    CJKV_DEBUG_TT42 { (.cjkv_makesfnts\n) print flush } if
    _cjkv_type42_util /.cjkv_readttdata get exec
    /head tabdict /head get def
    /locatable tabdict /loca get def
    /post tabdict /post .knownget not { null } if def
    /numloca
      locatable dup type /stringtype eq
       { length }
       { 0 exch { length add } forall }
      ifelse      % no def yet
    locatable type /stringtype eq {
      _cjkv_type42_tmp /.indexloca {} put
    } {
      _cjkv_type42_tmp /.indexloca _cjkv_type42_util /.cjkv_findseg get put
    } ifelse
    head 50 .cjkv_getu16 0 ne {
      _cjkv_type42_tmp /getloca {
        2 bitshift locatable exch _cjkv_type42_tmp /.indexloca get exec .cjkv_getu32
      } put
      4 idiv 1 sub
    } {
      _cjkv_type42_tmp /getloca {
        dup add locatable exch _cjkv_type42_tmp /.indexloca get exec .cjkv_getu16 dup add
      } put
      2 idiv 1 sub
    } ifelse def          % numloca
          % If necessary, re-partition the glyfs.
    tabdict /glyf get dup type /stringtype ne {
      _cjkv_type42_util /.cjkv_dividesfnts get exec tabdict /glyf 3 -1 roll put
    } {
      pop
    } ifelse
    /sfnts [
      offsets tabs { concatstrings } forall
      tabs {
        0 4 getinterval tabdict exch get
        dup type /stringtype ne { aload pop } if
      } forall
    ] def
  } bind def
  
  % <glyfs> .cjkv_dividesfnts <glyfs'>
  /.cjkv_dividesfnts {
    CJKV_DEBUG_TT42 { (.cjkv_dividesfnts\n) print flush } if
    /glyfs exch def
    /len1 0 glyfs { length add } forall def
  		% Determine where to split the glyfs by scanning loca.
  		% The very last entry in loca may be bogus.
  		% Note that some loca entries may be odd, but we can only
  		% split at even positions.
  		%
  		% Construct splitarray, the array of final lengths of
  		% the sfnts entries covering the glyfs (i.e., all but
  		% the first and last sfnts entries).
      /prevsplit 0 def
      /prevboundary 0 def
      /prevoddboundary 0 def % see TYPE42_NO_ODDSIZE_STR in zfont42.c
      /splitarray [
        0 1 numloca 1 sub {
  	_cjkv_type42_tmp /getloca get exec dup prevsplit maxstring add gt {
            prevboundary prevsplit eq { % see TYPE42_NO_ODDSIZE_STR in zfont42.c
               /ferr (%stderr) (w) file def
               ferr (glyf table ) writestring
               ferr prevsplit 10 string cvs writestring
               ferr ( - ) writestring
               dup 10 string cvs ferr exch writestring
               ferr ( too long segment without suitable boundary.\n)
               writestring
               ferr closefile
               /prevboundary prevoddboundary def
            } if
            CJKV_DEBUG_TT42 {
               dup 10 string cvs print
               ( segment is longer than maxstring, split now ) print
               prevboundary 10 string cvs print
               ( - ) print
               prevsplit 10 string cvs print
               (\n) print
            } if
  	  prevboundary prevsplit sub exch
  	  /prevsplit prevboundary def
            % /prevoddboundary 0 def
  	} if
  	dup 1 and 0 eq { % see TYPE42_NO_ODDSIZE_STR in zfont42.c
            CJKV_DEBUG_TT42 {
              dup 10 string cvs print
              ( \() print
              dup prevsplit sub 10 string cvs print
              (\) ) print
              ( even length OK\n) print
  	} if
            /prevboundary exch def
            % /prevoddboundary 0 def
          } {
            CJKV_DEBUG_TT42 {
              dup 10 string cvs print
              ( \() print
              dup prevsplit sub 10 string cvs print
              (\) ) print
              ( odd length!\n) print
  	} if
            % prevoddboundary 0 eq {
              /prevoddboundary exch def
            % } { pop } ifelse
          } ifelse
          % dup 0 eq { (why ZERO?\n) print } if
          % dup ==
        } for
        len1 prevsplit sub
      ] def
      currentuserparams /VMReclaim get -2 vmreclaim
      [
  		% Re-split the sfnts glyfs strings according to splitarray.
  		% We do this by iterating over the final segments defined
  		% by splitarray, and constructing them from pieces of the
  		% current glyfs strings.  We recycle the current strings
  		% when possible, to avoid stressing the allocator.
        /sfnt_idx 0 def
        /strpos 0 def
        _cjkv_type42_tmp /avail () put
        splitarray {
  	/seglen exch def
  	/segpos 0 def
  	_cjkv_type42_tmp /avail get length seglen ge
  	  { _cjkv_type42_tmp /avail get 0 seglen getinterval _cjkv_type42_tmp /avail () put } { seglen string }
  	ifelse
  	{
  	  /str glyfs sfnt_idx get def
  	  /strlen str length def
  	  /strleft strlen strpos sub def
  	  seglen segpos sub strleft lt { exit } if
  		% Copy the (rest of the) string into the new segment.
  		% We know strleft <= segleft.
  	  dup segpos str strpos strleft getinterval putinterval
  	  /segpos segpos strleft add def
  	  _cjkv_type42_tmp /avail str put
  	  /sfnt_idx sfnt_idx 1 add def
  	  /strpos 0 def
  	  segpos seglen eq { exit } if
  	} loop
  		% Fill up the segment with an initial piece of the next
  		% existing glyfs string.  We know strleft > segleft.
  	/segleft seglen segpos sub def
  	dup segpos str strpos segleft getinterval putinterval
  	/strpos strpos segleft add def
        } forall
      ]
      exch vmreclaim
  } bind def
  
  
  % - .cjkv_getpost -
  % Uses post, defines glyphencoding
  /.getpost {
    CJKV_DEBUG_TT42 { (.getpost\n) print flush } if
    /glyphencoding post null eq {
      CJKV_DEBUG_TT42 { (post missing) = flush } if [ ]
    } {
      postformats post 0 .cjkv_getu32 .knownget {
        CJKV_DEBUG_TT42 {
          (post: format ) print
          post 0 .cjkv_getu16 =only (,) print post 2 .cjkv_getu16 = flush
        } if
        post exch exec
      } {
        CJKV_DEBUG_TT42 { (post: unknown format ) print post 0 .cjkv_getu32 = flush } if [ ]
      } ifelse
    } ifelse def
  } bind def
  
  % - .cjkv_ttkeys <key> <value> ...
  /.cjkv_ttkeys {
    CJKV_DEBUG_TT42 { (.cjkv_ttkeys\n) print flush } if
    count /ttkeycount exch def
    /upem head 18 .cjkv_getu16 def
    /FontMatrix matrix
    /FontBBox [ 36 2 42 { head exch .cjkv_gets16 upem div } for ]
    .cjkv_nextxuid
    tabdict /name .knownget {
  		% Find the names from the 'name' table.
      /names exch def
      /FontName names 6 .cjkv_findname not { .cjkv_curxuid 16 8 string cvrs } if
        /fontname 1 index def
      /FontInfo mark
        names 0 .cjkv_findname { /Notice exch } if
        names 1 .cjkv_findname { /FamilyName exch } if
        names 4 .cjkv_findname { /FullName exch } if
        names 5 .cjkv_findname { /Version exch } if
    } {
  		% No name table, fabricate a FontName.
      /FontName .cjkv_curxuid 16 8 string cvrs
        /fontname 1 index def
      /FontInfo mark
    } ifelse
    CJKV_DEBUG_TT42 { (fontname ) print fontname = } if
  		% Stack: ... /FontInfo mark key1 value1 ...
    post null ne {
      post type /arraytype eq {
        % this post table is a big table. /post should be [(...) ...]
        % data we actually need here should be first one in array.
        /posttable post 1 get def
      } {
        /posttable post def
      } ifelse
      /ItalicAngle        posttable  4 .cjkv_gets32 65536.0 div
      /isFixedPitch       posttable 12 .cjkv_getu32 0 ne
      /UnderlinePosition  posttable  8 .cjkv_gets16 upem div
      /UnderlineThickness posttable 10 .cjkv_gets16 upem div
    } if
    counttomark 0 ne { .dicttomark } { pop pop } ifelse
    /XUID [orgXUID 42 .cjkv_curxuid]
    CJKV_DEBUG_TT42 {
      tabs { _cjkv_type42_util /.cjkv_printtab get exec } forall
      [ sfnts { length } forall ] ==
      count ttkeycount sub array astore dup { == } forall aload pop
    } if
    /sfnts sfnts
  } bind def
  
  % ---------------- Standard TrueType font loading ---------------- %
  
  % - .cjkv_pickcmap -
  % Defines cmapsub, cmaptab
  /.cjkv_pickcmap {
    CJKV_DEBUG_TT42 { (.cjkv_pickcmap\n) print flush } if
    tabdict /cmap get
  		% The Apple cmap format is no help in determining the encoding.
  		% Look for a Microsoft table.  If we can't find one,
  		% just use the first table, whatever it is.
    dup 4 8 .cjkv_biggetinterval exch             % the default
    0 1 2 index 2 .cjkv_biggetu16 1 sub {
      8 mul 4 add 1 index exch 8 .cjkv_biggetinterval
      dup 0 .cjkv_biggetu16 /cmap_platform exch def
      dup 2 .cjkv_biggetu16 /cmap_encoding exch def
      CJKV_DEBUG_TT42 {
        (cmap: platform ) print cmap_platform =only
        ( encoding ) print cmap_encoding = flush
      } if
      cmap_platform 3 eq { exch 3 -1 roll pop exit } if pop
    } for
  		% Stack: subentry table
    /cmapsub 2 index _cjkv_ttcmap_tmp 3 1 roll put
    exch 4 .cjkv_biggetu32 1 index .cjkv_biglength 1 index sub .cjkv_biggetinterval
    /cmaptab exch _cjkv_ttcmap_tmp 3 1 roll put
  } bind def
  
  % <glyph> .cjkv_nname <_name>
  /.cjkv_nname {
    CJKV_DEBUG_TT42 { (.cjkv_nname\n) print flush } if
    =string cvs (_) exch concatstrings cvn
  } bind def
  
  % - .cjkv_charkeys /CharStrings <charstrings> /Encoding <encoding>
  % Resets glyphencoding
  /.cjkv_charkeys {
    CJKV_DEBUG_TT42 { (.cjkv_charkeys\n) print flush } if
    CJKV_DEBUG_TT42 {
      (glyphencoding: length=) print glyphencoding dup length = === flush
    } if
  		% Hack: if there is no usable post table but the cmap uses
  		% the Microsoft Unicode encoding, use ISOLatin1Encoding.
    glyphencoding length 0 eq _cjkv_ttcmap_tmp /cmapsub get 0 4 getinterval <00030001> eq and {
      /glyphencoding ISOLatin1Encoding dup length array copy def
    } if
  		% If necessary, fabricate additional glyphencoding entries
  		% to cover all of loca, or truncate glyphencoding.
    glyphencoding length numloca lt {
      /glyphencoding [ glyphencoding aload pop
      counttomark 1 numloca 1 sub { .cjkv_nname } for ] def
    } {
      /glyphencoding glyphencoding 0 numloca getinterval def
    } ifelse
  		% Some badly designed Chinese fonts have a post table
  		% in which all glyphs other than 0 are named .null.
  		% Use CharStrings to keep track of the reverse map from
  		% names to glyphs, and don't let any name be used for
  		% more than one glyph.
    /CharStrings glyphencoding dup length 1 add dict	% +1 for .notdef
      0 1 3 index length 1 sub {
  		% Stack: glyphencoding dict index
        2 index 1 index get 2 index 1 index known {
  		% The same name maps to more than one glyph.
  		% Change the name.
  	pop dup .cjkv_nname 3 index 2 index 2 index put
        } if
        2 index exch 3 -1 roll put
      } for exch pop
  		% If there is no .notdef entry, map it to glyph 0.
    dup /.notdef known not { dup /.notdef 0 put } if
    readonly
    /Encoding
      [ _cjkv_ttcmap_tmp /cmaptab get _cjkv_cmaparray dup length 256 gt { 0 256 getinterval } if
      { glyphencoding exch get } forall
      counttomark 256 exch sub { /.notdef } repeat ]
    CJKV_DEBUG_TT42 { (Encoding: ) print dup === flush } if
  } bind def
  
  % -mark- <key> <value> ... .cjkv_definettfont <font>
  /.cjkv_definettfont {
    CJKV_DEBUG_TT42 { (.cjkv_definettfont\n) print flush } if
    /FontType 42
    /PaintType 0
    CJKV_DEBUG_TT42 {
      (numloca=) print numloca =
    } if
    .dicttomark
    end end dup /FontName get exch definefont
  } bind def
  
  
  % <file> .cjkv_loadttfont <type42font>
  /.cjkv_loadttfont {
    CJKV_DEBUG_TT42 { (.cjkv_loadttfont\n) print flush } if
    .cjkv_loadttfonttables
    .cjkv_makesfnts
    .cjkv_getpost
    .cjkv_pickcmap
    mark
    .cjkv_charkeys
    .cjkv_ttkeys
    .cjkv_definettfont
  } bind def

end readonly def
