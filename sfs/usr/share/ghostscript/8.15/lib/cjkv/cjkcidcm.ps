%!
%
% Developed by AXE,Inc., BBR Inc. and Turbolinux Inc.
%   under the technical advice by suzuki toshiya (Hiroshima University)
% For questions, please send mail to espgs8-cjk@printing-japan.org
%
% (C) Copyright 2006 Center of the International Cooperation for
%     Computerization
%
%
% Based on gs-cjk patches
% Copyright (C) 2001-2003 gs-cjk project:
%   Taiji Yamada, Masatake Yamato, Hideyuki Suzuki and suzuki toshiya.
%   All rights reserved.
%
%
% Based on GNU Ghostscript 7.07 and 8.15
% Copyright (C) 1996-2003 artofcode LLC.  All rights reserved.
%
% This software is provided AS-IS with no warranty, either express or
% implied.
%
%
% This program is free software;  you can redistribute it and/or
% modify it under the terms of the GNU General Public License as
% published by the Free Software Foundation; either version 2 of
% the License, or (at your option) any later version.
%
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
% See the GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with this program; if not, write to the Free Software Foundation,
% Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
%

true setglobal

[
   /CJKV_DEBUG_CIDCM
   /NOCIDFONTMAP
] {dup where {pop pop} { currentdict exch false def pop } ifelse} forall

% -------------------------------------------------------------------------------
% taken from gs7.05/lib/gs_cidcm.ps

25 dict begin

  /.prs_dict currentdict def
  /.prs_empty 0 dict readonly def
  /enable_cache true def
  /path_buffer 8192 string def
  /name_buffer 1024 string def
  /minus (-) 0 get def             % character code constant for '-'
  /period (.) 0 get def            % character code constant for '.'
  /CMap 10 dict def                % CSI cache for CMaps
  /CIDFont 10 dict def             % CSI cache for CIDFonts
  /enable_cache true def           % set false to disable cache
  /.prsFile 0 def                   % file to prescan
  /.prsResult 0 def                 % result of prescan
  /.prsDictCount 0 def              % save the dictionary stack depth


  /.cjkv_StopIfCSIDefined {   % - StopIfCSIDefined -
    CJKV_DEBUG_CIDCM { (.cjkv_StopIfCSIDefined\n) print flush } if
  
    % Check if the dictionary stack contains a dictionary containing /CIDSystemInfo.
    % The search is limited to the top .prsDictCount dictionaries in the stack.
    % If so, retrieve the CSI, and execute stop to terminate the pre-scanning of the file.
    % Otherwise, do nothing, so the pre-scanning continues.
  
    countdictstack //.prs_dict /.prsDictCount get sub dup {
      currentdict /CIDSystemInfo .knownget {
        //.prs_dict exch /.prsResult exch put
        stop
      } if
      currentdict exch end
    } repeat {
      begin
    } repeat
  } bind def
  
  /.cjkv_PrescanFile {     % - PrescanFile -
    CJKV_DEBUG_CIDCM { (.cjkv_PrescanFile\n) print flush } if
    { //.prs_dict /.prsFile get token {
        dup type                          % token type
        dup /nametype eq exch /operatortype eq or {
          dup xcheck {
            exec
            //.cjkv_StopIfCSIDefined exec
          } if
        } if
      } {
        stop
      } ifelse
    } loop
  } bind odef
  
  /.cjkv_GetCIDSystemInfoFromFile { % <file> GetCIDSystemInfoFromFile <CSI>
    CJKV_DEBUG_CIDCM { (.cjkv_GetCIDSystemInfoFromFile\n) print flush } if
    //.prs_dict begin
    /.prsFile exch def
    /.prsResult //.prs_empty def
    /.prsDictCount countdictstack def
    { //.cjkv_PrescanFile } stopped pop
    //.prs_dict /.prsResult get
    end
  } bind def


  /.cjkv_GetCIDSystemInfo {     % <InstName> <CatName> GetCIDSystemInfo <CSI>
    CJKV_DEBUG_CIDCM { (*** .cjkv_GetCIDSystemInfo: ) print 1 index =only ( in ) print dup == flush } if
    2 copy resourcestatus {
      CJKV_DEBUG_CIDCM { (*** .cjkv_GetCIDSystemInfo: resource status OK\n) print } if
      pop 2 lt {
        CJKV_DEBUG_CIDCM { (*** .cjkv_GetCIDSystemInfo: resource status < 2\n) print } if
        findresource /CIDSystemInfo .knownget not { //.prs_empty } if
      } {
        CJKV_DEBUG_CIDCM { (*** .cjkv_GetCIDSystemInfo: resource status >= 2\n) print } if
        dup //.prs_dict exch get dup 3 index known //enable_cache and {
          CJKV_DEBUG_CIDCM { (*** .cjkv_GetCIDSystemInfo: resource cached\n) print } if
          exch pop exch get
        } {
          CJKV_DEBUG_CIDCM { (*** .cjkv_GetCIDSystemInfo: resource not-cached\n) print } if
          3 1 roll /Category findresource begin dup //path_buffer ResourceFileName
          end currentglobal exch true setglobal mark exch {
            CJKV_DEBUG_CIDCM { (*** .cjkv_GetCIDSystemInfo->.cjkv_GetCIDSystemInfoFromFile\n) print } if
            (r) file //.cjkv_GetCIDSystemInfoFromFile exec
          } stopped
          {
            cleartomark 1 index dup
            CJKV_DEBUG_CIDCM { (*** .cjkv_GetCIDSystemInfo->.CIDFontmapKnownget START\n) print } if
            /CIDFont /Category findresource /.cjkv_CIDFontmapKnownget get exec
            CJKV_DEBUG_CIDCM { (*** .cjkv_GetCIDSystemInfo->.CIDFontmapKnownget EXECED\n) print } if
            {
              CJKV_DEBUG_CIDCM { (*** .cjkv_GetCIDSystemInfo [knownget OK]\n) print } if
              true setglobal 1 index 3 1 roll
              CJKV_DEBUG_CIDCM { (*** .cjkv_GetCIDSystemInfo->.cjkv_CIDFontmapRunHandler\n) print } if
              /CIDFont /Category findresource /.cjkv_CIDFontmapRunHandler get exec
              CJKV_DEBUG_CIDCM { (*** .cjkv_GetCIDSystemInfo<-.cjkv_CIDFontmapRunHandler\n) print } if
              /CIDFont findresource /CIDSystemInfo get
            } {
              CJKV_DEBUG_CIDCM { (*** .cjkv_GetCIDSystemInfo [knownget FAILED]\n) print } if
              pop //.prs_empty
            } ifelse
          } {
            CJKV_DEBUG_CIDCM { (*** .cjkv_GetCIDSystemInfo [not stopped]\n) print } if
            exch pop
          } ifelse
          exch setglobal dup 4 1 roll put
        } ifelse
      } ifelse
    } {
      CJKV_DEBUG_CIDCM { (*** .cjkv_GetCIDSystemInfo: resource status FAILED\n) print } if
      pop pop //.prs_empty
    } ifelse
    CJKV_DEBUG_CIDCM { (*** .cjkv_GetCIDSystemInfo finished\n) print flush } if
  } bind def

  /GetCIDSystemInfo {
    .cjkv_GetCIDSystemInfo
  } bind def

  % -------------------------------------------------------------------------------
  /orig_font_resourcestatus /Generic /Category findresource /ResourceStatus get bind def
  /orig_font_resourceforall /Generic /Category findresource /ResourceForAll get bind def
  /orig_font_findresource   /Font    /Category findresource /FindResource   get bind def

  /BindAux {   % <proc> BindAux <proc>
    0 exec
  } bind def
  
  /EnumerateFontNames {
    end
    {
      0 1 2 {
        en_local_dict exch /status exch put
        Fonts {
          en_local_dict /status get eq {
            scr cvs
            proc exec
          } {
            pop
          } ifelse
        } forall
      } for
    } stopped
    Category begin
    { stop } if
  } bind def
  
  /Bind {
    dup length array copy
    dup length 1 sub -1 0 {
      2 copy get
      dup dup type /arraytype eq exch xcheck and {
        //BindAux exec
        2 index 3 1 roll put
      } {
        dup dup type /nametype eq exch xcheck and {
          currentdict exch .knownget {
            2 index 3 1 roll put
          } {
            pop
          } ifelse
        } {
          pop pop
        } ifelse
      } ifelse
    } for
    cvx
  } bind def
  
  //BindAux 0 //Bind put

  CJKV_DEBUG_CIDCM { (*** Font Enumurator utility definition OK\n) print flush } if

  % ---------------------------------------------------------------------------------

  /.cjkv_ComposeName {
    CJKV_DEBUG_CIDCM { (*** .cjkv_ComposeName\n) print flush } if
    dup dup 5 2 roll 3 2 roll exch cvs length dup 4 -1 roll exch //minus put 1 add dup
    3 index dup length 2 index sub 3 2 roll exch getinterval 3 2 roll exch cvs length
    add 0 exch getinterval
  } bind def

  /.cjkv_IsCompatibleCSI {
    CJKV_DEBUG_CIDCM { (*** .cjkv_IsCompatibleCSI\n) print flush } if
    exch
    { dup type /arraytype eq {
        dup length 1 ne { pop pop false exit } if
        0 get
      } if
      dup type /dicttype ne { pop pop false exit } if
      exch
      dup type /dicttype ne { pop pop false exit } if
      true
      [/Registry /Ordering] {
        2 index 1 index .knownget not { 1234567 } if
        exch
        4 index exch .knownget not { 7654321 } if
        eq and
      } forall
      exch pop exch pop
      exit
    } loop
  } bind def

  /.cjkv_IsComposedOK {
    CJKV_DEBUG_CIDCM { (*** .cjkv_IsComposedOK ENTER with: ) print 1 index =only ( ) print dup == flush } if
    exch
    /CIDFont
    CJKV_DEBUG_CIDCM { (*** .cjkv_IsComposedOK->.cjkv_GetCIDSystemInfo for CIDFont:) print 1 index == flush } if
    .cjkv_GetCIDSystemInfo
    CJKV_DEBUG_CIDCM { (*** .cjkv_IsComposedOK<-.cjkv_GetCIDSystemInfo\n) print flush } if
    dup type /dicttype eq {
      dup length 0 ne {
        exch /CMap
        CJKV_DEBUG_CIDCM { (*** .cjkv_IsComposedOK->.cjkv_GetCIDSystemInfo for CMap:) print 1 index == flush } if
        .cjkv_GetCIDSystemInfo
        CJKV_DEBUG_CIDCM { (*** .cjkv_IsComposedOK<-.cjkv_GetCIDSystemInfo\n) print flush } if
        CJKV_DEBUG_CIDCM { (*** .cjkv_IsComposedOK->.cjkv_IsCompatibleCSI\n) print flush } if
        .cjkv_IsCompatibleCSI
        CJKV_DEBUG_CIDCM { (*** .cjkv_IsComposedOK<-.cjkv_IsCompatibleCSI\n) print flush } if
      } {
        pop pop false
      } ifelse
    } {
      pop pop false
    } ifelse
    CJKV_DEBUG_CIDCM { (*** .cjkv_IsComposedOK EXIT with ) print dup == flush } if
  } bind def
  
  /.cjkv_IsComposedFont {
    CJKV_DEBUG_CIDCM { (*** .cjkv_IsComposedFont START: ) print 3 index =only ( ) print 2 index =only ( ) print 1 index =only ( ) print dup ==  flush } if
    dup type /stringtype ne {
      //name_buffer cvs
    } if
    {
      dup length 2 sub -1 1 {
        2 copy get dup //minus eq exch //period eq or {
          2 copy 2 copy
          2 copy get //minus eq {
            2 copy 1 sub get //minus eq {
              1 sub
            } if
          } if
          0 exch getinterval cvn 3 1 roll 1 add dup 5 index length exch sub getinterval cvn
          2 copy
          CJKV_DEBUG_CIDCM { (*** .cjkv_IsComposedFont->.cjkv_IsComposedOK\n) print flush } if
          .cjkv_IsComposedOK {
            4 2 roll pop pop stop
          } if
          pop pop pop
        } {
          pop
        } ifelse
      } for
      pop
    } stopped
    CJKV_DEBUG_CIDCM { (*** .cjkv_IsComposedFont END:\n) print pstack (--bottom--\n) print flush } if
  } bind def

  CJKV_DEBUG_CIDCM { (*** CIDFont-CMap font utility definition OK\n) print flush } if

  % -------------------------------------------------------------------------------

  /.cjkv_ResourceStatus {  % <InstName> ResourceStatus <nStatus> <nSize> true
    	                   % <InstName> ResourceStatus false
    CJKV_DEBUG_CIDCM { (*** .cjkv_ResourceStatus start\n) print pstack (  ---bottom--\n) print flush } if
    dup
    CJKV_DEBUG_CIDCM { (*** .cjkv_ResourceStatus->orig_font_resourcestatus [for precomposed CIDFont-CMap resource]\n) print flush } if
    orig_font_resourcestatus {
      CJKV_DEBUG_CIDCM { (*** .cjkv_ResourceStatus->orig_font_resourcestatus OK, exit\n) print flush } if
      3 2 roll pop true
    } {
      CJKV_DEBUG_CIDCM { (*** .cjkv_ResourceStatus->orig_font_resourcestatus FAILED, check uncomposed composite font\n) print flush } if
      CJKV_DEBUG_CIDCM { (*** .cjkv_ResourceStatus->.cjkv_IsComposedFont\n) print flush } if
      .cjkv_IsComposedFont {
        CJKV_DEBUG_CIDCM { (*** looks composite font, check CMap\n) print flush } if
        /CMap CJKV_DEBUG_CIDCM { (---top---\n) print pstack (---bottom---\n) print flush } if resourcestatus {
          CJKV_DEBUG_CIDCM { (*** CMap OK, check CIDFont\n) print flush } if
          exch pop exch /CIDFont resourcestatus {
            CJKV_DEBUG_CIDCM { (*** exist, finally check status/size\n) print flush } if
            exch pop dup 0 ge {
              CJKV_DEBUG_CIDCM { (*** check status/size OK\n) print flush } if
              exch dup 0 ge {
                add
              } {
                exch pop
              } ifelse
            } {
              CJKV_DEBUG_CIDCM { (*** check status/size FAILED\n) print flush } if
              pop
            } ifelse
            2 exch true
          } {
            CJKV_DEBUG_CIDCM { (*** inexist CIDFont\n) print flush } if
            pop pop pop false
          } ifelse
        } {
          CJKV_DEBUG_CIDCM { (*** inexist CMap\n) print flush } if
          pop pop pop false
        } ifelse
      } {
        CJKV_DEBUG_CIDCM { (*** not composite font\n) print flush } if
        false
      } ifelse
    } ifelse
    CJKV_DEBUG_CIDCM { (*** .cjkv_ResourceStatus finished\n) print pstack (  ---bottom--\n) print flush } if
  } bind def

  /ResourceStatus {
    CJKV_DEBUG_CIDCM { (*** STUB: ResourceStatus\n) print flush } if
    .cjkv_ResourceStatus
  } bind def

  % -------------------------------------------------------------------------------
  
  /.cjkv_ResourceForAll { % <template> <proc> <scratch> ResourceForAll -
    CJKV_DEBUG_CIDCM { (*** .cjkv_ResourceForAll\n) print flush } if
    currentglobal false setglobal
    20 dict 20 dict 20 dict
    4 -1 roll setglobal
    5 index [ 2 index {exch cvn dup put} aload pop ] cvx 5 index orig_font_resourceforall
    (*)     [ 3 index {exch cvn dup put} aload pop ] cvx 5 index /CMap resourceforall
    (*)     [ 4 index {exch cvn dup put} aload pop ] cvx 5 index /CIDFont resourceforall
    dup {
      //.cjkv_ResourceStatus exec {
        pop 2 index 3 1 roll put
      } {
        pop
      } ifelse
    } forall
  
    3 2 roll  {
      3 index {
        3 1 roll 6 index .cjkv_ComposeName dup 8 index .stringmatch {
          cvn dup 4 index exch known {
            pop pop
          } {
            2 index 4 2 roll .cjkv_IsComposedOK {
              exch 2 index exch 2 put
            } {
              exch pop
            } ifelse
          } ifelse
        } {
          pop pop
        } ifelse
        dup
      } forall
      pop pop
    } forall
    exch pop
  
    currentdict
    6 dict begin % the temporary dictionary
      /Category exch def
      /Fonts exch def
      /scr exch def
      /proc exch def
      /en_local_dict currentdict def
      //EnumerateFontNames //Bind exec
      /status 0 def
    end
    exch pop
  
    exec
    CJKV_DEBUG_CIDCM { (*** .cjkv_ResourceForAll finished\n) print flush } if
  } bind def

  /ResourceForAll {
    CJKV_DEBUG_CIDCM { (*** STUB: ResourceStatus\n) print flush } if
    .cjkv_ResourceForAll
  } bind def

  CJKV_DEBUG_CIDCM { (*** ResourceForAll definition OK\n) print flush } if

  % -------------------------------------------------------------------------------

  /.cjkv_FindResource {
    CJKV_DEBUG_CIDCM { (*** .cjkv_FindResource\n) print flush } if
    dup //.cjkv_ResourceStatus exec {
      pop pop
      CJKV_DEBUG_CIDCM { (*** .cjkv_FindResource->orig_font_findresource #1\n) print flush } if
      orig_font_findresource
    } {
      dup
        CJKV_DEBUG_CIDCM { (*** .cjkv_FindResource->.cjkv_IsComposedFont\n) print flush } if
        //.cjkv_IsComposedFont exec {
        exch [ exch ] composefont
      } {
        CJKV_DEBUG_CIDCM { (*** .cjkv_FindResource->orig_font_findresource #2\n) print flush } if
        orig_font_findresource
      } ifelse
    } ifelse
    CJKV_DEBUG_CIDCM { (*** .cjkv_FindResource finished\n) print flush } if
  } bind def
 
  /FindResource {
    CJKV_DEBUG_CIDCM { (*** STUB: FindResource\n) print flush } if
    .cjkv_FindResource
  } bind def

  % -------------------------------------------------------------------------------

currentdict end
% /Generic /Category findresource dup length 25 add dict .copydict copy
/Font /Category findresource dup length 25 add dict .copydict copy
/Font exch /Category
defineresource pop
false setglobal
